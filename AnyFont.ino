//######################################################################################
//######################################################################################
//######################################################################################
//######################################          ######################################
//###################################### WARNING: ######################################
//######################################          ######################################
//######################################################################################
//######################################################################################
//###                                                                                ###
//### This code file is automatically generated.                                     ###
//###  Any modifications to this file will be erased next generation.                ###
//###                                                                                ###
//### If you want to modify the code, modify .\arduinotemplate\arduinotemplate.ino   ###
//###                                                                                ###
//######################################################################################
//######################################################################################
//######################################################################################









// AVR boards like the Nano have to explicitly be told to leave variables in progmem
//  Whereas SAMD boards do this by default on constant data - so the "MEM_TYPE" keyword is replaced with nothing on SAMD boards.

// About "SAMD_CONST", due to the differences in how PROGMEM and SRAM work, we have to change whether they are const or not to save the most space

#ifdef __AVR__
#define MEM_TYPE PROGMEM
#define SAMD_CONST
#else
#define MEM_TYPE
#define SAMD_CONST const
#endif


#include <stdint.h>

struct Point {
    SAMD_CONST uint8_t x;
    SAMD_CONST uint8_t y;
};

struct Contour {
    SAMD_CONST Point* points;
    SAMD_CONST uint8_t pointCount;
};

struct Letter {
    SAMD_CONST char letter;
    SAMD_CONST Contour* contours;
    SAMD_CONST uint8_t contourCount;
};

const Point A_contour1_points[] MEM_TYPE = {
	{74, 1},
	{73, 2},
	{69, 2},
	{69, 2},
	{66, 2},
	{65, 3},
	{63, 3},
	{63, 4},
	{61, 4},
	{61, 4},
	{59, 4},
	{59, 5},
	{57, 5},
	{56, 6},
	{56, 6},
	{55, 6},
	{54, 6},
	{54, 7},
	{52, 7},
	{52, 8},
	{51, 8},
	{50, 9},
	{49, 9},
	{48, 10},
	{48, 10},
	{46, 11},
	{46, 11},
	{44, 12},
	{44, 12},
	{40, 16},
	{39, 16},
	{33, 23},
	{33, 23},
	{29, 27},
	{29, 28},
	{27, 30},
	{27, 31},
	{25, 32},
	{25, 33},
	{25, 33},
	{25, 34},
	{23, 35},
	{23, 36},
	{23, 37},
	{23, 37},
	{22, 38},
	{22, 39},
	{21, 40},
	{21, 40},
	{21, 41},
	{21, 42},
	{20, 42},
	{20, 44},
	{19, 44},
	{19, 45},
	{18, 46},
	{18, 47},
	{18, 48},
	{18, 49},
	{17, 50},
	{17, 51},
	{16, 52},
	{16, 54},
	{16, 54},
	{16, 57},
	{15, 58},
	{15, 61},
	{14, 61},
	{14, 67},
	{14, 67},
	{14, 99},
	{14, 100},
	{14, 102},
	{14, 103},
	{13, 181}
};
const Point A_contour2_points[] MEM_TYPE = {
	{14, 102},
	{14, 101},
	{15, 101},
	{145, 101},
	{146, 102},
	{146, 103},
	{147, 103},
	{146, 181}
};
const Point A_contour3_points[] MEM_TYPE = {
	{146, 102},
	{145, 101},
	{145, 100},
	{146, 99},
	{146, 99},
	{147, 98},
	{147, 66},
	{146, 65},
	{146, 61},
	{145, 60},
	{145, 57},
	{145, 56},
	{145, 54},
	{144, 54},
	{144, 52},
	{143, 51},
	{143, 50},
	{143, 49},
	{143, 48},
	{142, 47},
	{142, 46},
	{141, 45},
	{141, 44},
	{141, 44},
	{141, 42},
	{140, 42},
	{140, 41},
	{139, 40},
	{139, 40},
	{139, 39},
	{139, 38},
	{138, 37},
	{138, 37},
	{136, 35},
	{136, 35},
	{135, 33},
	{135, 33},
	{134, 32},
	{134, 31},
	{132, 29},
	{132, 29},
	{130, 26},
	{130, 25},
	{119, 14},
	{118, 14},
	{115, 12},
	{115, 12},
	{113, 10},
	{113, 10},
	{111, 9},
	{111, 9},
	{110, 8},
	{109, 8},
	{109, 8},
	{108, 8},
	{107, 7},
	{107, 7},
	{106, 6},
	{105, 6},
	{105, 6},
	{103, 6},
	{103, 5},
	{102, 5},
	{101, 4},
	{100, 4},
	{99, 4},
	{97, 4},
	{96, 3},
	{94, 3},
	{94, 2},
	{91, 2},
	{90, 2},
	{86, 1}
};
const Point C_contour1_points[] MEM_TYPE = {
	{94, 1},
	{93, 2},
	{87, 2},
	{86, 2},
	{83, 2},
	{82, 3},
	{80, 3},
	{80, 4},
	{77, 4},
	{77, 4},
	{75, 4},
	{74, 5},
	{73, 5},
	{72, 6},
	{71, 6},
	{70, 6},
	{69, 6},
	{68, 7},
	{67, 7},
	{66, 8},
	{65, 8},
	{65, 8},
	{64, 8},
	{63, 9},
	{63, 9},
	{62, 10},
	{61, 10},
	{61, 10},
	{60, 10},
	{59, 11},
	{59, 11},
	{58, 12},
	{57, 12},
	{56, 12},
	{56, 12},
	{55, 13},
	{54, 13},
	{53, 14},
	{52, 14},
	{51, 16},
	{50, 16},
	{49, 17},
	{48, 17},
	{46, 20},
	{45, 20},
	{30, 35},
	{30, 35},
	{27, 38},
	{27, 39},
	{26, 40},
	{26, 41},
	{25, 42},
	{25, 43},
	{23, 44},
	{23, 45},
	{23, 46},
	{23, 46},
	{22, 47},
	{22, 48},
	{21, 48},
	{21, 49},
	{21, 50},
	{21, 50},
	{20, 51},
	{20, 52},
	{19, 52},
	{19, 53},
	{18, 54},
	{18, 54},
	{18, 55},
	{18, 56},
	{17, 56},
	{17, 58},
	{16, 59},
	{16, 60},
	{16, 61},
	{16, 62},
	{15, 63},
	{15, 64},
	{14, 65},
	{14, 67},
	{14, 67},
	{14, 69},
	{13, 70},
	{13, 72},
	{12, 73},
	{12, 76},
	{12, 77},
	{12, 83},
	{11, 84},
	{11, 98},
	{12, 99},
	{12, 104},
	{12, 105},
	{12, 108},
	{13, 109},
	{13, 111},
	{14, 111},
	{14, 114},
	{14, 115},
	{14, 116},
	{15, 117},
	{15, 119},
	{16, 120},
	{16, 121},
	{16, 122},
	{16, 122},
	{17, 123},
	{17, 124},
	{18, 125},
	{18, 126},
	{18, 126},
	{18, 127},
	{19, 128},
	{19, 129},
	{20, 130},
	{20, 130},
	{21, 132},
	{21, 132},
	{22, 133},
	{22, 134},
	{23, 134},
	{23, 135},
	{23, 136},
	{23, 136},
	{25, 138},
	{25, 139},
	{26, 140},
	{26, 141},
	{27, 142},
	{27, 143},
	{29, 145},
	{29, 145},
	{31, 147},
	{31, 148},
	{43, 160},
	{44, 160},
	{46, 162},
	{46, 162},
	{48, 164},
	{49, 164},
	{50, 165},
	{51, 165},
	{52, 166},
	{53, 166},
	{54, 168},
	{55, 168},
	{56, 169},
	{57, 169},
	{58, 170},
	{59, 170},
	{59, 170},
	{60, 170},
	{61, 171},
	{61, 171},
	{62, 172},
	{63, 172},
	{63, 172},
	{64, 172},
	{65, 173},
	{65, 173},
	{66, 174},
	{67, 174},
	{68, 174},
	{69, 174},
	{69, 175},
	{71, 175},
	{71, 176},
	{73, 176},
	{73, 177},
	{75, 177},
	{75, 177},
	{77, 177},
	{78, 178},
	{80, 178},
	{81, 179},
	{84, 179},
	{85, 179},
	{89, 179},
	{90, 180},
	{111, 180},
	{112, 179},
	{117, 179},
	{118, 179},
	{120, 179},
	{121, 178},
	{123, 178},
	{124, 177},
	{126, 177},
	{126, 177},
	{128, 177},
	{128, 176},
	{130, 176},
	{130, 175},
	{132, 175},
	{132, 174},
	{134, 174},
	{134, 174},
	{135, 174},
	{136, 173},
	{136, 173},
	{137, 172},
	{139, 172},
	{139, 172},
	{140, 172},
	{141, 171},
	{141, 171},
	{143, 170},
	{143, 170},
	{144, 169},
	{145, 169},
	{145, 168},
	{146, 168},
	{147, 167},
	{148, 167},
	{149, 166},
	{150, 166},
	{151, 164},
	{152, 164},
	{154, 162},
	{155, 162},
	{157, 160},
	{158, 160},
	{162, 155},
	{163, 155},
	{164, 154},
	{166, 152}
};
const Point C_contour2_points[] MEM_TYPE = {
	{94, 1},
	{108, 1},
	{109, 2},
	{114, 2},
	{115, 2},
	{118, 2},
	{119, 3},
	{121, 3},
	{122, 4},
	{124, 4},
	{125, 4},
	{126, 4},
	{127, 5},
	{128, 5},
	{129, 6},
	{130, 6},
	{131, 6},
	{132, 6},
	{133, 7},
	{134, 7},
	{135, 8},
	{136, 8},
	{136, 8},
	{137, 8},
	{138, 9},
	{139, 9},
	{140, 10},
	{141, 10},
	{141, 10},
	{142, 10},
	{143, 11},
	{143, 11},
	{145, 12},
	{145, 12},
	{146, 13},
	{147, 13},
	{147, 14},
	{148, 14},
	{149, 15},
	{150, 15},
	{152, 17},
	{153, 17},
	{155, 19},
	{155, 19},
	{162, 25},
	{162, 25},
	{164, 27},
	{166, 29}
};
const Point D_contour1_points[] MEM_TYPE = {
	{49, 1},
	{48, 2},
	{45, 2},
	{44, 2},
	{42, 2},
	{41, 3},
	{40, 3},
	{39, 4},
	{37, 4},
	{37, 4},
	{36, 4},
	{35, 5},
	{35, 5},
	{34, 6},
	{33, 6},
	{33, 6},
	{32, 6},
	{31, 7},
	{31, 7},
	{29, 9},
	{28, 9},
	{22, 15},
	{22, 16},
	{21, 17},
	{21, 18},
	{19, 19},
	{19, 20},
	{18, 21},
	{18, 21},
	{18, 22},
	{18, 23},
	{17, 23},
	{17, 25},
	{16, 25},
	{16, 26},
	{16, 27},
	{16, 29},
	{15, 29},
	{15, 31},
	{14, 32},
	{14, 35},
	{14, 36},
	{14, 181},
	{13, 181},
	{14, 180},
	{65, 180},
	{66, 179},
	{70, 179},
	{71, 179},
	{74, 179},
	{75, 178},
	{77, 178},
	{77, 177},
	{80, 177},
	{80, 177},
	{82, 177},
	{82, 176},
	{84, 176},
	{84, 175},
	{86, 175},
	{86, 174},
	{87, 174},
	{88, 174},
	{89, 174},
	{90, 173},
	{90, 173},
	{91, 172},
	{92, 172},
	{92, 172},
	{93, 172},
	{94, 171},
	{94, 171},
	{95, 170},
	{96, 170},
	{96, 170},
	{97, 170},
	{98, 169},
	{99, 169},
	{100, 168},
	{101, 168},
	{102, 166},
	{103, 166},
	{104, 165},
	{105, 165},
	{106, 164},
	{107, 164},
	{109, 162},
	{109, 162},
	{111, 160},
	{112, 160},
	{124, 148},
	{124, 147},
	{126, 145},
	{126, 145},
	{128, 143},
	{128, 142},
	{130, 140},
	{130, 139},
	{131, 138},
	{131, 137},
	{132, 136},
	{132, 135},
	{133, 134},
	{133, 134},
	{134, 133},
	{134, 132},
	{135, 131},
	{135, 130},
	{136, 130},
	{136, 129},
	{136, 128},
	{136, 127},
	{137, 126},
	{137, 126},
	{138, 125},
	{138, 124},
	{139, 124},
	{139, 122},
	{139, 122},
	{139, 121},
	{140, 120},
	{140, 119},
	{141, 118},
	{141, 116},
	{141, 115},
	{141, 114},
	{142, 113},
	{142, 111},
	{143, 111},
	{143, 108},
	{143, 107},
	{143, 103},
	{144, 103},
	{144, 94},
	{145, 94},
	{145, 87},
	{144, 86},
	{144, 78},
	{143, 77},
	{143, 74},
	{143, 73},
	{143, 71},
	{142, 70},
	{142, 68},
	{141, 67},
	{141, 65},
	{141, 65},
	{141, 63},
	{140, 63},
	{140, 61},
	{139, 61},
	{139, 59},
	{139, 59},
	{139, 58},
	{138, 57},
	{138, 56},
	{137, 55},
	{137, 54},
	{136, 54},
	{136, 53},
	{136, 52},
	{136, 52},
	{135, 51},
	{135, 50},
	{134, 50},
	{134, 49},
	{134, 48},
	{134, 48},
	{133, 47},
	{133, 46},
	{132, 46},
	{132, 45},
	{131, 44},
	{131, 43},
	{130, 42},
	{130, 41},
	{128, 39},
	{128, 38},
	{125, 35},
	{125, 35},
	{110, 20},
	{109, 20},
	{107, 17},
	{106, 17},
	{105, 16},
	{104, 16},
	{103, 14},
	{102, 14},
	{101, 14},
	{101, 14},
	{99, 12},
	{99, 12},
	{98, 12},
	{97, 12},
	{96, 11},
	{96, 11},
	{95, 10},
	{94, 10},
	{94, 10},
	{93, 10},
	{92, 9},
	{92, 9},
	{91, 8},
	{90, 8},
	{90, 8},
	{88, 8},
	{88, 7},
	{87, 7},
	{86, 6},
	{85, 6},
	{84, 6},
	{83, 6},
	{82, 5},
	{81, 5},
	{80, 4},
	{78, 4},
	{77, 4},
	{75, 4},
	{75, 3},
	{72, 3},
	{71, 2},
	{68, 2},
	{67, 2},
	{61, 1}
};
const Point E_contour1_points[] MEM_TYPE = {
	{108, 0},
	{108, 0},
	{107, 1},
	{66, 1},
	{65, 2},
	{61, 2},
	{61, 2},
	{58, 2},
	{57, 3},
	{55, 3},
	{54, 4},
	{53, 4},
	{52, 4},
	{51, 4},
	{50, 5},
	{49, 5},
	{48, 6},
	{48, 6},
	{47, 6},
	{46, 6},
	{46, 7},
	{45, 7},
	{44, 8},
	{44, 8},
	{43, 8},
	{42, 8},
	{42, 9},
	{41, 9},
	{40, 10},
	{39, 10},
	{37, 12},
	{37, 12},
	{35, 14},
	{34, 14},
	{24, 24},
	{24, 25},
	{21, 27},
	{21, 28},
	{21, 29},
	{21, 29},
	{19, 31},
	{19, 31},
	{18, 32},
	{18, 33},
	{18, 33},
	{18, 34},
	{17, 35},
	{17, 35},
	{16, 36},
	{16, 37},
	{16, 37},
	{16, 38},
	{15, 39},
	{15, 40},
	{14, 41},
	{14, 42},
	{14, 43},
	{14, 44},
	{13, 45},
	{13, 47},
	{12, 48},
	{12, 50},
	{12, 51},
	{12, 55},
	{11, 56},
	{11, 88},
	{12, 89},
	{12, 91},
	{11, 92},
	{11, 125},
	{12, 126},
	{12, 130},
	{12, 130},
	{12, 133},
	{13, 134},
	{13, 136},
	{14, 136},
	{14, 138},
	{14, 139},
	{14, 140},
	{15, 141},
	{15, 142},
	{16, 143},
	{16, 143},
	{16, 144},
	{16, 145},
	{17, 145},
	{17, 146},
	{18, 147},
	{18, 147},
	{18, 148},
	{18, 149},
	{19, 149},
	{19, 150},
	{21, 151},
	{21, 152},
	{21, 153},
	{21, 153},
	{23, 155},
	{23, 156},
	{26, 159},
	{26, 160},
	{31, 165},
	{32, 165},
	{35, 168},
	{35, 168},
	{37, 170},
	{38, 170},
	{40, 171},
	{40, 171},
	{42, 172},
	{42, 172},
	{43, 173},
	{44, 173},
	{44, 174},
	{45, 174},
	{46, 174},
	{46, 174},
	{47, 175},
	{48, 175},
	{48, 176},
	{49, 176},
	{50, 177},
	{51, 177},
	{52, 177},
	{53, 177},
	{54, 178},
	{56, 178},
	{56, 179},
	{59, 179},
	{59, 179},
	{62, 179},
	{63, 180},
	{109, 181}
};
const Point E_contour2_points[] MEM_TYPE = {
	{12, 91},
	{12, 90},
	{12, 90},
	{98, 91}
};
const Point E_contour3_points[] MEM_TYPE = {
	{66, 1},
	{108, 1},
	{109, 2}
};
const Point E_contour4_points[] MEM_TYPE = {
	{66, 1},
	{109, 2}
};
const Point F_contour1_points[] MEM_TYPE = {
	{100, 0},
	{100, 0},
	{99, 1},
	{66, 1},
	{65, 2},
	{61, 2},
	{61, 2},
	{58, 2},
	{57, 3},
	{55, 3},
	{54, 4},
	{53, 4},
	{52, 4},
	{51, 4},
	{50, 5},
	{49, 5},
	{48, 6},
	{48, 6},
	{47, 6},
	{46, 6},
	{46, 7},
	{45, 7},
	{44, 8},
	{44, 8},
	{43, 8},
	{42, 8},
	{42, 9},
	{41, 9},
	{40, 10},
	{39, 10},
	{37, 12},
	{37, 12},
	{34, 14},
	{33, 14},
	{24, 24},
	{24, 25},
	{21, 27},
	{21, 28},
	{21, 29},
	{21, 29},
	{19, 31},
	{19, 31},
	{18, 32},
	{18, 33},
	{18, 33},
	{18, 34},
	{17, 35},
	{17, 35},
	{16, 36},
	{16, 37},
	{16, 37},
	{16, 38},
	{15, 39},
	{15, 40},
	{14, 41},
	{14, 42},
	{14, 43},
	{14, 44},
	{13, 45},
	{13, 47},
	{12, 48},
	{12, 50},
	{12, 51},
	{12, 55},
	{11, 56},
	{11, 92},
	{12, 93},
	{12, 95},
	{11, 96},
	{10, 181}
};
const Point F_contour2_points[] MEM_TYPE = {
	{12, 95},
	{12, 94},
	{12, 94},
	{89, 94},
	{90, 94}
};
const Point F_contour3_points[] MEM_TYPE = {
	{66, 1},
	{100, 1},
	{101, 2}
};
const Point F_contour4_points[] MEM_TYPE = {
	{66, 1},
	{101, 2}
};
const Point G_contour1_points[] MEM_TYPE = {
	{90, 1},
	{89, 2},
	{83, 2},
	{82, 2},
	{79, 2},
	{78, 3},
	{76, 3},
	{75, 4},
	{73, 4},
	{73, 4},
	{71, 4},
	{70, 5},
	{69, 5},
	{68, 6},
	{67, 6},
	{66, 6},
	{65, 6},
	{64, 7},
	{63, 7},
	{62, 8},
	{61, 8},
	{61, 8},
	{60, 8},
	{59, 9},
	{59, 9},
	{58, 10},
	{57, 10},
	{56, 10},
	{56, 10},
	{55, 11},
	{54, 11},
	{54, 12},
	{53, 12},
	{52, 12},
	{52, 12},
	{51, 13},
	{50, 13},
	{49, 14},
	{48, 14},
	{47, 16},
	{46, 16},
	{44, 18},
	{44, 18},
	{41, 21},
	{40, 21},
	{27, 34},
	{27, 35},
	{23, 38},
	{23, 39},
	{22, 40},
	{22, 41},
	{21, 42},
	{21, 43},
	{19, 44},
	{19, 45},
	{18, 46},
	{18, 46},
	{18, 47},
	{18, 48},
	{17, 48},
	{17, 49},
	{16, 50},
	{16, 50},
	{16, 51},
	{16, 52},
	{15, 52},
	{15, 53},
	{14, 54},
	{14, 54},
	{14, 55},
	{14, 56},
	{13, 56},
	{13, 58},
	{12, 59},
	{12, 60},
	{12, 61},
	{12, 62},
	{11, 63},
	{11, 64},
	{10, 65},
	{10, 67},
	{10, 67},
	{10, 69},
	{9, 70},
	{9, 72},
	{8, 73},
	{8, 76},
	{8, 77},
	{8, 82},
	{7, 83},
	{7, 97},
	{8, 98},
	{8, 104},
	{8, 105},
	{8, 108},
	{9, 109},
	{9, 111},
	{10, 111},
	{10, 114},
	{10, 115},
	{10, 116},
	{11, 117},
	{11, 118},
	{12, 119},
	{12, 120},
	{12, 121},
	{12, 122},
	{13, 123},
	{13, 124},
	{14, 125},
	{14, 126},
	{14, 126},
	{14, 127},
	{15, 128},
	{15, 128},
	{16, 129},
	{16, 130},
	{16, 130},
	{16, 131},
	{17, 132},
	{17, 132},
	{18, 133},
	{18, 134},
	{18, 134},
	{18, 135},
	{19, 136},
	{19, 136},
	{21, 138},
	{21, 139},
	{22, 140},
	{22, 141},
	{23, 142},
	{23, 143},
	{25, 144},
	{25, 145},
	{27, 147},
	{27, 148},
	{39, 160},
	{40, 160},
	{42, 162},
	{43, 162},
	{44, 164},
	{45, 164},
	{46, 165},
	{47, 165},
	{48, 166},
	{49, 166},
	{50, 168},
	{51, 168},
	{52, 168},
	{52, 168},
	{54, 170},
	{54, 170},
	{55, 170},
	{56, 170},
	{56, 171},
	{57, 171},
	{58, 172},
	{59, 172},
	{59, 172},
	{60, 172},
	{61, 173},
	{62, 173},
	{63, 174},
	{63, 174},
	{64, 174},
	{65, 174},
	{66, 175},
	{67, 175},
	{67, 176},
	{69, 176},
	{69, 177},
	{71, 177},
	{72, 177},
	{73, 177},
	{74, 178},
	{77, 178},
	{77, 179},
	{80, 179},
	{81, 179},
	{85, 179},
	{86, 180},
	{108, 180},
	{109, 179},
	{113, 179},
	{113, 179},
	{116, 179},
	{117, 178},
	{119, 178},
	{120, 177},
	{122, 177},
	{122, 177},
	{124, 177},
	{124, 176},
	{126, 176},
	{126, 175},
	{128, 175},
	{128, 174},
	{129, 174},
	{130, 174},
	{131, 174},
	{132, 173},
	{132, 173},
	{133, 172},
	{134, 172},
	{134, 172},
	{135, 172},
	{136, 171},
	{136, 171},
	{137, 170},
	{138, 170},
	{139, 169},
	{140, 169},
	{141, 168},
	{141, 168},
	{143, 167},
	{143, 167},
	{145, 166},
	{145, 166},
	{148, 163},
	{149, 163},
	{151, 160},
	{152, 160},
	{161, 151},
	{161, 151},
	{164, 147},
	{164, 147},
	{166, 145},
	{166, 144},
	{168, 142},
	{168, 141},
	{170, 140},
	{170, 139},
	{170, 139},
	{170, 138},
	{171, 137},
	{171, 136},
	{172, 135},
	{172, 134},
	{173, 134},
	{173, 133},
	{174, 132},
	{174, 131},
	{174, 130},
	{174, 130},
	{175, 129},
	{175, 128},
	{176, 128},
	{176, 126},
	{177, 126},
	{177, 125},
	{177, 124},
	{177, 123},
	{178, 122},
	{178, 121},
	{179, 120},
	{179, 118},
	{179, 118},
	{179, 115},
	{180, 115},
	{180, 113},
	{181, 112},
	{181, 109},
	{181, 108},
	{181, 103},
	{182, 102},
	{182, 90},
	{183, 90},
	{181, 91},
	{180, 91},
	{179, 90},
	{95, 89}
};
const Point G_contour2_points[] MEM_TYPE = {
	{90, 1},
	{104, 1},
	{105, 2},
	{109, 2},
	{110, 2},
	{113, 2},
	{114, 3},
	{117, 3},
	{118, 4},
	{120, 4},
	{120, 4},
	{122, 4},
	{123, 5},
	{124, 5},
	{125, 6},
	{126, 6},
	{127, 6},
	{128, 6},
	{129, 7},
	{130, 7},
	{130, 8},
	{132, 8},
	{132, 8},
	{133, 8},
	{134, 9},
	{134, 9},
	{135, 10},
	{136, 10},
	{136, 10},
	{137, 10},
	{138, 11},
	{139, 11},
	{139, 12},
	{140, 12},
	{141, 12},
	{141, 12},
	{143, 14},
	{143, 14},
	{144, 14},
	{145, 14},
	{146, 16},
	{147, 16},
	{148, 17},
	{149, 17},
	{151, 20},
	{152, 20},
	{155, 23},
	{156, 23},
	{158, 25}
};
const Point H_contour1_points[] MEM_TYPE = {
	{16, 0},
	{16, 0},
	{14, 0},
	{15, 0},
	{16, 1},
	{16, 89},
	{16, 90},
	{16, 92},
	{16, 92},
	{15, 181}
};
const Point H_contour2_points[] MEM_TYPE = {
	{16, 92},
	{16, 91},
	{17, 90},
	{121, 90},
	{122, 92},
	{122, 92},
	{123, 93},
	{122, 181}
};
const Point H_contour3_points[] MEM_TYPE = {
	{122, 92},
	{122, 91},
	{122, 90},
	{122, 89},
	{122, 88},
	{123, 88},
	{124, 0}
};
const Point I_contour1_points[] MEM_TYPE = {
	{19, 0},
	{18, 0},
	{17, 0},
	{18, 0},
	{18, 1},
	{18, 181}
};
const Point J_contour1_points[] MEM_TYPE = {
	{63, 0},
	{63, 0},
	{61, 0},
	{62, 0},
	{63, 1},
	{63, 126},
	{62, 126},
	{62, 130},
	{61, 131},
	{61, 134},
	{61, 134},
	{61, 136},
	{60, 137},
	{60, 139},
	{59, 139},
	{59, 140},
	{59, 141},
	{59, 142},
	{58, 143},
	{58, 143},
	{57, 144},
	{57, 145},
	{56, 145},
	{56, 146},
	{56, 147},
	{56, 147},
	{55, 148},
	{55, 149},
	{54, 150},
	{54, 151},
	{53, 151},
	{53, 152},
	{51, 154},
	{51, 155},
	{49, 157},
	{49, 158},
	{45, 162},
	{45, 162},
	{44, 163},
	{44, 163},
	{40, 167},
	{39, 167},
	{37, 169},
	{36, 169},
	{35, 170},
	{34, 170},
	{33, 172},
	{32, 172},
	{31, 172},
	{31, 172},
	{29, 174},
	{29, 174},
	{28, 174},
	{27, 174},
	{27, 175},
	{26, 175},
	{25, 176},
	{24, 176},
	{23, 177},
	{23, 177},
	{22, 177},
	{21, 177},
	{20, 178},
	{18, 178},
	{17, 179},
	{15, 179},
	{14, 179},
	{11, 179},
	{10, 180},
	{1, 180},
	{0, 179}
};
const Point K_contour1_points[] MEM_TYPE = {
	{16, 0},
	{16, 0},
	{14, 0},
	{15, 0},
	{16, 1},
	{16, 85},
	{16, 86},
	{16, 86},
	{17, 87},
	{17, 88},
	{16, 89},
	{16, 92},
	{17, 93},
	{17, 94},
	{16, 95},
	{16, 96},
	{16, 96},
	{15, 181}
};
const Point K_contour2_points[] MEM_TYPE = {
	{17, 94},
	{19, 94},
	{103, 179},
	{104, 179},
	{106, 180}
};
const Point K_contour3_points[] MEM_TYPE = {
	{17, 88},
	{17, 88},
	{18, 87},
	{105, 1}
};
const Point L_contour1_points[] MEM_TYPE = {
	{16, 0},
	{16, 0},
	{14, 0},
	{15, 0},
	{16, 1},
	{16, 125},
	{16, 126},
	{16, 130},
	{17, 130},
	{17, 133},
	{18, 134},
	{18, 136},
	{18, 136},
	{18, 138},
	{19, 139},
	{19, 140},
	{20, 141},
	{20, 142},
	{21, 143},
	{21, 143},
	{21, 144},
	{21, 145},
	{22, 145},
	{22, 146},
	{23, 147},
	{23, 147},
	{23, 148},
	{23, 149},
	{24, 149},
	{24, 150},
	{25, 151},
	{25, 151},
	{26, 153},
	{26, 153},
	{28, 155},
	{28, 156},
	{30, 158},
	{30, 159},
	{37, 166},
	{37, 166},
	{40, 168},
	{40, 168},
	{42, 170},
	{43, 170},
	{44, 171},
	{45, 171},
	{46, 172},
	{46, 172},
	{48, 173},
	{48, 173},
	{49, 174},
	{50, 174},
	{50, 174},
	{51, 174},
	{52, 175},
	{52, 175},
	{53, 176},
	{54, 176},
	{55, 177},
	{56, 177},
	{56, 177},
	{58, 177},
	{59, 178},
	{61, 178},
	{61, 179},
	{63, 179},
	{64, 179},
	{67, 179},
	{67, 180},
	{118, 181}
};
const Point M_contour1_points[] MEM_TYPE = {
	{16, 0},
	{16, 0},
	{14, 0},
	{15, 0},
	{16, 1},
	{16, 42},
	{16, 43},
	{16, 44},
	{18, 45},
	{18, 47},
	{17, 48},
	{17, 52},
	{16, 52},
	{16, 60},
	{16, 61},
	{15, 181}
};
const Point M_contour2_points[] MEM_TYPE = {
	{18, 47},
	{18, 46},
	{21, 43},
	{21, 42},
	{22, 41},
	{22, 40},
	{23, 40},
	{23, 39},
	{23, 38},
	{23, 37},
	{24, 37},
	{24, 36},
	{25, 35},
	{25, 35},
	{25, 34},
	{25, 33},
	{26, 33},
	{26, 32},
	{27, 31},
	{27, 31},
	{27, 30},
	{27, 29},
	{29, 28},
	{29, 27},
	{30, 26},
	{30, 25},
	{33, 23},
	{33, 22},
	{42, 12},
	{43, 12},
	{45, 10},
	{46, 10},
	{47, 9},
	{48, 9},
	{48, 8},
	{49, 8},
	{50, 8},
	{50, 8},
	{52, 6},
	{53, 6},
	{54, 6},
	{54, 6},
	{55, 5},
	{56, 5},
	{56, 4},
	{58, 4},
	{59, 4},
	{60, 4},
	{61, 3},
	{62, 3},
	{63, 2},
	{65, 2},
	{66, 2},
	{69, 2},
	{70, 1},
	{80, 1},
	{81, 2},
	{85, 2},
	{86, 2},
	{88, 2},
	{88, 3},
	{90, 3},
	{91, 4},
	{92, 4},
	{93, 4},
	{94, 4},
	{94, 5},
	{96, 5},
	{96, 6},
	{97, 6},
	{98, 6},
	{99, 6},
	{99, 7},
	{100, 7},
	{101, 8},
	{101, 8},
	{103, 9},
	{103, 9},
	{104, 10},
	{105, 10},
	{107, 12},
	{107, 12},
	{119, 23},
	{119, 24},
	{121, 26},
	{121, 27},
	{123, 29},
	{123, 29},
	{124, 31},
	{124, 31},
	{125, 32},
	{125, 33},
	{126, 33},
	{126, 34},
	{126, 35},
	{126, 35},
	{127, 36},
	{127, 37},
	{128, 37},
	{128, 38},
	{128, 39},
	{128, 40},
	{129, 40},
	{129, 42},
	{130, 42},
	{130, 43},
	{130, 44},
	{130, 45},
	{131, 46},
	{131, 47},
	{132, 48},
	{132, 50},
	{132, 50},
	{132, 51},
	{134, 52},
	{134, 53},
	{135, 54},
	{134, 181}
};
const Point M_contour3_points[] MEM_TYPE = {
	{135, 181},
	{136, 181},
	{136, 181},
	{135, 180},
	{135, 54},
	{137, 52},
	{137, 51},
	{139, 50},
	{139, 48},
	{139, 47},
	{139, 46},
	{140, 45},
	{140, 44},
	{141, 43},
	{141, 42},
	{141, 42},
	{141, 40},
	{142, 40},
	{142, 39},
	{143, 38},
	{143, 37},
	{143, 37},
	{143, 35},
	{144, 35},
	{144, 34},
	{145, 33},
	{145, 32},
	{146, 31},
	{146, 31},
	{147, 30},
	{147, 29},
	{148, 28},
	{148, 27},
	{149, 26},
	{149, 25},
	{151, 23},
	{151, 23},
	{162, 12},
	{162, 12},
	{164, 10},
	{165, 10},
	{166, 9},
	{167, 9},
	{168, 8},
	{168, 8},
	{170, 7},
	{170, 7},
	{171, 6},
	{172, 6},
	{172, 6},
	{174, 6},
	{174, 5},
	{175, 5},
	{176, 4},
	{177, 4},
	{178, 4},
	{179, 4},
	{180, 3},
	{181, 3},
	{182, 2},
	{185, 2},
	{185, 2},
	{189, 2},
	{189, 1},
	{200, 1},
	{200, 2},
	{204, 2},
	{205, 2},
	{207, 2},
	{208, 3},
	{210, 3},
	{210, 4},
	{212, 4},
	{212, 4},
	{214, 4},
	{214, 5},
	{215, 5},
	{216, 6},
	{217, 6},
	{217, 6},
	{218, 6},
	{219, 7},
	{219, 7},
	{220, 8},
	{221, 8},
	{221, 8},
	{222, 8},
	{223, 10},
	{224, 10},
	{226, 12},
	{227, 12},
	{238, 23},
	{238, 24},
	{240, 26},
	{240, 27},
	{242, 29},
	{242, 29},
	{244, 31},
	{244, 31},
	{244, 32},
	{244, 33},
	{245, 33},
	{245, 34},
	{246, 35},
	{246, 37},
	{247, 37},
	{247, 38},
	{248, 39},
	{248, 40},
	{248, 40},
	{248, 41},
	{249, 42},
	{249, 43},
	{250, 44},
	{250, 44},
	{250, 45},
	{250, 46},
	{251, 47},
	{251, 49},
	{252, 50},
	{252, 51},
	{252, 52},
	{252, 54},
	{253, 55},
	{253, 58},
	{254, 59},
	{254, 63},
	{255, 64},
	{254, 181}
};
const Point N_contour1_points[] MEM_TYPE = {
	{16, 0},
	{16, 0},
	{14, 0},
	{15, 0},
	{16, 1},
	{16, 42},
	{16, 43},
	{16, 44},
	{18, 45},
	{18, 47},
	{17, 48},
	{17, 52},
	{16, 53},
	{16, 59},
	{16, 60},
	{15, 181}
};
const Point N_contour2_points[] MEM_TYPE = {
	{18, 47},
	{18, 46},
	{21, 43},
	{21, 42},
	{23, 40},
	{23, 40},
	{23, 39},
	{23, 38},
	{24, 37},
	{24, 37},
	{25, 36},
	{25, 35},
	{25, 35},
	{25, 34},
	{26, 33},
	{26, 33},
	{27, 31},
	{27, 31},
	{28, 30},
	{28, 29},
	{30, 27},
	{30, 27},
	{33, 24},
	{33, 23},
	{41, 15},
	{42, 15},
	{44, 13},
	{44, 13},
	{46, 12},
	{46, 12},
	{48, 10},
	{48, 10},
	{50, 9},
	{50, 9},
	{51, 8},
	{52, 8},
	{52, 8},
	{53, 8},
	{54, 7},
	{54, 7},
	{55, 6},
	{56, 6},
	{56, 6},
	{58, 6},
	{59, 5},
	{59, 5},
	{60, 4},
	{61, 4},
	{62, 4},
	{63, 4},
	{64, 3},
	{66, 3},
	{67, 2},
	{69, 2},
	{70, 2},
	{74, 2},
	{75, 1},
	{86, 1},
	{87, 2},
	{91, 2},
	{92, 2},
	{94, 2},
	{95, 3},
	{97, 3},
	{98, 4},
	{99, 4},
	{100, 4},
	{101, 4},
	{102, 5},
	{103, 5},
	{103, 6},
	{105, 6},
	{105, 6},
	{106, 6},
	{107, 7},
	{107, 7},
	{108, 8},
	{109, 8},
	{109, 8},
	{110, 8},
	{111, 9},
	{111, 9},
	{113, 10},
	{113, 10},
	{115, 12},
	{115, 12},
	{118, 14},
	{118, 14},
	{130, 25},
	{130, 26},
	{132, 28},
	{132, 29},
	{134, 31},
	{134, 31},
	{135, 33},
	{135, 33},
	{136, 34},
	{136, 35},
	{136, 35},
	{136, 36},
	{137, 37},
	{137, 37},
	{138, 38},
	{138, 39},
	{139, 40},
	{139, 40},
	{139, 41},
	{139, 42},
	{140, 42},
	{140, 43},
	{141, 44},
	{141, 45},
	{141, 46},
	{141, 47},
	{142, 48},
	{142, 49},
	{143, 50},
	{143, 51},
	{143, 52},
	{143, 54},
	{144, 54},
	{144, 58},
	{145, 59},
	{145, 63},
	{145, 63},
	{145, 181}
};
const Point O_contour1_points[] MEM_TYPE = {
	{92, 2},
	{93, 1},
	{107, 1},
	{108, 2},
	{114, 2},
	{115, 2},
	{118, 2},
	{119, 3},
	{121, 3},
	{122, 4},
	{124, 4},
	{124, 4},
	{126, 4},
	{127, 5},
	{128, 5},
	{129, 6},
	{130, 6},
	{131, 6},
	{132, 6},
	{133, 7},
	{134, 7},
	{135, 8},
	{136, 8},
	{136, 8},
	{137, 8},
	{138, 9},
	{139, 9},
	{139, 10},
	{140, 10},
	{141, 10},
	{141, 10},
	{142, 11},
	{143, 11},
	{143, 12},
	{144, 12},
	{145, 12},
	{145, 12},
	{146, 13},
	{147, 13},
	{148, 14},
	{149, 14},
	{150, 16},
	{151, 16},
	{152, 17},
	{153, 17},
	{155, 20},
	{156, 20},
	{162, 25},
	{162, 25},
	{166, 29},
	{166, 29},
	{172, 35},
	{172, 36},
	{174, 38},
	{174, 39},
	{176, 41},
	{176, 42},
	{177, 43},
	{177, 44},
	{179, 45},
	{179, 46},
	{179, 46},
	{179, 47},
	{180, 48},
	{180, 48},
	{181, 49},
	{181, 50},
	{181, 50},
	{181, 51},
	{182, 52},
	{182, 52},
	{183, 53},
	{183, 54},
	{183, 54},
	{183, 55},
	{184, 56},
	{184, 56},
	{185, 57},
	{185, 59},
	{185, 59},
	{185, 61},
	{186, 61},
	{186, 63},
	{187, 63},
	{187, 65},
	{187, 65},
	{187, 67},
	{188, 68},
	{188, 70},
	{189, 71},
	{189, 73},
	{189, 74},
	{189, 77},
	{190, 78},
	{190, 86},
	{191, 87},
	{191, 94},
	{190, 94},
	{190, 103},
	{189, 103},
	{189, 107},
	{189, 108},
	{189, 111},
	{188, 111},
	{188, 113},
	{187, 114},
	{187, 115},
	{187, 116},
	{187, 118},
	{186, 119},
	{186, 120},
	{185, 121},
	{185, 122},
	{185, 122},
	{185, 124},
	{184, 124},
	{184, 125},
	{183, 126},
	{183, 126},
	{183, 127},
	{183, 128},
	{182, 129},
	{182, 130},
	{181, 130},
	{181, 131},
	{180, 132},
	{180, 133},
	{179, 134},
	{179, 134},
	{179, 135},
	{179, 136},
	{177, 137},
	{177, 138},
	{176, 139},
	{176, 140},
	{174, 142},
	{174, 143},
	{172, 144},
	{172, 145},
	{170, 147},
	{170, 148},
	{158, 160},
	{158, 160},
	{155, 162},
	{154, 162},
	{153, 164},
	{152, 164},
	{150, 166},
	{149, 166},
	{148, 167},
	{147, 167},
	{147, 168},
	{146, 168},
	{145, 169},
	{144, 169},
	{143, 170},
	{143, 170},
	{142, 170},
	{141, 170},
	{141, 171},
	{140, 171},
	{139, 172},
	{139, 172},
	{138, 172},
	{137, 172},
	{136, 173},
	{136, 173},
	{135, 174},
	{134, 174},
	{134, 174},
	{132, 174},
	{132, 175},
	{130, 175},
	{130, 176},
	{128, 176},
	{128, 177},
	{126, 177},
	{126, 177},
	{124, 177},
	{123, 178},
	{121, 178},
	{120, 179},
	{117, 179},
	{116, 179},
	{112, 179},
	{111, 180},
	{90, 180},
	{89, 179},
	{85, 179},
	{84, 179},
	{81, 179},
	{80, 178},
	{78, 178},
	{77, 177},
	{75, 177},
	{75, 177},
	{73, 177},
	{73, 176},
	{71, 176},
	{71, 175},
	{69, 175},
	{69, 174},
	{68, 174},
	{67, 174},
	{66, 174},
	{65, 173},
	{65, 173},
	{64, 172},
	{63, 172},
	{63, 172},
	{62, 172},
	{61, 171},
	{61, 171},
	{60, 170},
	{59, 170},
	{59, 170},
	{58, 170},
	{57, 169},
	{56, 169},
	{55, 168},
	{54, 168},
	{53, 166},
	{52, 166},
	{51, 165},
	{50, 165},
	{49, 164},
	{48, 164},
	{47, 162},
	{46, 162},
	{44, 160},
	{43, 160},
	{31, 148},
	{31, 147},
	{29, 145},
	{29, 144},
	{27, 143},
	{27, 142},
	{26, 141},
	{26, 140},
	{25, 139},
	{25, 138},
	{23, 136},
	{23, 136},
	{23, 135},
	{23, 134},
	{22, 134},
	{22, 133},
	{21, 132},
	{21, 132},
	{20, 130},
	{20, 130},
	{19, 129},
	{19, 128},
	{18, 127},
	{18, 126},
	{18, 126},
	{18, 125},
	{17, 124},
	{17, 123},
	{16, 122},
	{16, 122},
	{16, 121},
	{16, 120},
	{15, 119},
	{15, 117},
	{14, 116},
	{14, 115},
	{14, 114},
	{14, 111},
	{13, 111},
	{13, 109},
	{12, 108},
	{12, 105},
	{12, 104},
	{12, 99},
	{11, 98},
	{11, 84},
	{12, 83},
	{12, 77},
	{12, 76},
	{12, 73},
	{13, 72},
	{13, 70},
	{14, 69},
	{14, 67},
	{14, 67},
	{14, 65},
	{15, 64},
	{15, 63},
	{16, 62},
	{16, 61},
	{16, 60},
	{16, 59},
	{17, 58},
	{17, 56},
	{18, 56},
	{18, 55},
	{18, 54},
	{18, 54},
	{19, 53},
	{19, 52},
	{20, 52},
	{20, 51},
	{21, 50},
	{21, 50},
	{21, 49},
	{21, 48},
	{22, 48},
	{22, 47},
	{23, 46},
	{23, 46},
	{23, 45},
	{23, 44},
	{25, 43},
	{25, 42},
	{26, 41},
	{26, 40},
	{27, 39},
	{27, 38},
	{30, 35},
	{30, 35},
	{45, 20},
	{46, 20},
	{48, 17},
	{49, 17},
	{50, 16},
	{51, 16},
	{52, 14},
	{53, 14},
	{54, 13},
	{55, 13},
	{56, 12},
	{56, 12},
	{57, 12},
	{58, 12},
	{59, 11},
	{59, 11},
	{61, 10},
	{61, 10},
	{62, 9},
	{63, 9},
	{64, 8},
	{65, 8},
	{65, 8},
	{66, 8},
	{67, 7},
	{68, 7},
	{69, 6},
	{70, 6},
	{71, 6},
	{72, 6},
	{73, 5},
	{74, 5},
	{75, 4},
	{77, 4},
	{77, 4},
	{80, 4},
	{80, 3},
	{82, 3},
	{83, 2},
	{87, 2}
};
const Point P_contour1_points[] MEM_TYPE = {
	{73, 1},
	{73, 2},
	{69, 2},
	{68, 2},
	{65, 2},
	{65, 3},
	{63, 3},
	{62, 4},
	{61, 4},
	{60, 4},
	{59, 4},
	{58, 5},
	{56, 5},
	{56, 6},
	{54, 6},
	{54, 6},
	{53, 6},
	{52, 7},
	{52, 7},
	{51, 8},
	{50, 8},
	{50, 8},
	{49, 8},
	{48, 9},
	{48, 9},
	{46, 10},
	{46, 10},
	{44, 12},
	{44, 12},
	{42, 14},
	{41, 14},
	{29, 25},
	{29, 26},
	{27, 28},
	{27, 29},
	{26, 30},
	{26, 31},
	{25, 32},
	{25, 33},
	{24, 33},
	{24, 34},
	{23, 35},
	{23, 35},
	{23, 36},
	{23, 37},
	{22, 37},
	{22, 38},
	{21, 39},
	{21, 40},
	{21, 40},
	{21, 42},
	{20, 42},
	{20, 44},
	{19, 44},
	{19, 46},
	{18, 46},
	{18, 48},
	{18, 49},
	{18, 52},
	{17, 52},
	{17, 56},
	{16, 57},
	{16, 181}
};
const Point P_contour2_points[] MEM_TYPE = {
	{73, 1},
	{86, 1},
	{86, 2},
	{90, 2},
	{91, 2},
	{94, 2},
	{94, 3},
	{96, 3},
	{97, 4},
	{99, 4},
	{100, 4},
	{101, 4},
	{102, 5},
	{103, 5},
	{104, 6},
	{105, 6},
	{105, 6},
	{106, 6},
	{107, 7},
	{107, 7},
	{108, 8},
	{109, 8},
	{109, 8},
	{110, 8},
	{111, 9},
	{111, 9},
	{112, 10},
	{113, 10},
	{114, 11},
	{115, 11},
	{116, 12},
	{117, 12},
	{119, 14},
	{120, 14},
	{130, 25},
	{130, 25},
	{132, 28},
	{132, 29},
	{134, 30},
	{134, 31},
	{135, 32},
	{135, 33},
	{136, 33},
	{136, 34},
	{136, 35},
	{136, 35},
	{138, 37},
	{138, 38},
	{139, 39},
	{139, 40},
	{139, 40},
	{139, 41},
	{140, 42},
	{140, 43},
	{141, 44},
	{141, 45},
	{141, 46},
	{141, 47},
	{142, 48},
	{142, 50},
	{143, 50},
	{143, 54},
	{143, 54},
	{143, 61},
	{144, 61},
	{144, 67},
	{143, 68},
	{143, 74},
	{143, 75},
	{143, 78},
	{142, 79},
	{142, 81},
	{141, 82},
	{141, 83},
	{141, 84},
	{141, 85},
	{140, 86},
	{140, 87},
	{139, 88},
	{139, 88},
	{139, 89},
	{139, 90},
	{138, 91},
	{138, 92},
	{137, 92},
	{137, 93},
	{136, 94},
	{136, 95},
	{135, 96},
	{135, 96},
	{134, 98},
	{134, 99},
	{132, 100},
	{132, 101},
	{131, 102},
	{131, 103},
	{128, 105},
	{128, 106},
	{122, 113},
	{121, 113},
	{119, 115},
	{118, 115},
	{116, 117},
	{115, 117},
	{114, 118},
	{113, 118},
	{113, 119},
	{112, 119},
	{111, 120},
	{110, 120},
	{109, 121},
	{109, 121},
	{108, 122},
	{107, 122},
	{107, 122},
	{106, 122},
	{105, 123},
	{105, 123},
	{104, 124},
	{103, 124},
	{103, 124},
	{101, 124},
	{101, 125},
	{99, 125},
	{99, 126},
	{96, 126},
	{96, 126},
	{94, 126},
	{93, 127},
	{90, 127},
	{89, 128},
	{71, 128},
	{70, 127},
	{67, 127},
	{66, 126},
	{64, 126},
	{63, 126},
	{61, 126},
	{61, 125},
	{59, 125},
	{59, 124},
	{57, 124},
	{56, 124},
	{56, 124},
	{55, 123},
	{54, 123},
	{54, 122},
	{53, 122},
	{52, 122},
	{52, 122},
	{51, 121},
	{50, 121},
	{50, 120},
	{49, 120},
	{48, 120},
	{48, 120},
	{46, 118},
	{46, 118},
	{44, 117},
	{44, 117},
	{42, 115},
	{41, 115},
	{40, 114},
	{38, 113}
};
const Point Q_contour1_points[] MEM_TYPE = {
	{93, 1},
	{92, 2},
	{87, 2},
	{86, 2},
	{83, 2},
	{82, 3},
	{80, 3},
	{80, 4},
	{77, 4},
	{77, 4},
	{75, 4},
	{74, 5},
	{73, 5},
	{72, 6},
	{71, 6},
	{70, 6},
	{69, 6},
	{68, 7},
	{67, 7},
	{66, 8},
	{65, 8},
	{65, 8},
	{64, 8},
	{63, 9},
	{63, 9},
	{62, 10},
	{61, 10},
	{61, 10},
	{60, 10},
	{59, 11},
	{59, 11},
	{58, 12},
	{57, 12},
	{56, 12},
	{56, 12},
	{55, 13},
	{54, 13},
	{53, 14},
	{52, 14},
	{51, 16},
	{50, 16},
	{49, 17},
	{48, 17},
	{46, 20},
	{45, 20},
	{30, 35},
	{30, 35},
	{27, 38},
	{27, 39},
	{26, 40},
	{26, 41},
	{25, 42},
	{25, 43},
	{23, 44},
	{23, 45},
	{23, 46},
	{23, 46},
	{22, 47},
	{22, 48},
	{21, 48},
	{21, 49},
	{21, 50},
	{21, 50},
	{20, 51},
	{20, 52},
	{19, 52},
	{19, 53},
	{18, 54},
	{18, 54},
	{18, 55},
	{18, 56},
	{17, 56},
	{17, 58},
	{16, 59},
	{16, 60},
	{16, 61},
	{16, 62},
	{15, 63},
	{15, 64},
	{14, 65},
	{14, 67},
	{14, 67},
	{14, 69},
	{13, 70},
	{13, 72},
	{12, 73},
	{12, 76},
	{12, 77},
	{12, 83},
	{11, 84},
	{11, 98},
	{12, 99},
	{12, 104},
	{12, 105},
	{12, 108},
	{13, 109},
	{13, 111},
	{14, 111},
	{14, 114},
	{14, 115},
	{14, 116},
	{15, 117},
	{15, 118},
	{16, 119},
	{16, 120},
	{16, 121},
	{16, 122},
	{17, 123},
	{17, 124},
	{18, 125},
	{18, 126},
	{18, 126},
	{18, 127},
	{19, 128},
	{19, 128},
	{20, 129},
	{20, 130},
	{21, 130},
	{21, 131},
	{21, 132},
	{21, 132},
	{22, 133},
	{22, 134},
	{23, 134},
	{23, 135},
	{23, 136},
	{23, 136},
	{25, 138},
	{25, 139},
	{26, 140},
	{26, 141},
	{27, 142},
	{27, 143},
	{29, 145},
	{29, 145},
	{32, 148},
	{32, 149},
	{42, 159},
	{43, 159},
	{46, 162},
	{46, 162},
	{48, 164},
	{49, 164},
	{50, 165},
	{51, 165},
	{52, 166},
	{53, 166},
	{54, 168},
	{55, 168},
	{56, 169},
	{57, 169},
	{58, 170},
	{59, 170},
	{59, 170},
	{60, 170},
	{61, 171},
	{61, 171},
	{62, 172},
	{63, 172},
	{63, 172},
	{64, 172},
	{65, 173},
	{65, 173},
	{66, 174},
	{67, 174},
	{68, 174},
	{69, 174},
	{69, 175},
	{71, 175},
	{71, 176},
	{73, 176},
	{73, 177},
	{75, 177},
	{75, 177},
	{77, 177},
	{78, 178},
	{80, 178},
	{81, 179},
	{84, 179},
	{85, 179},
	{89, 179},
	{90, 180},
	{101, 180},
	{101, 181},
	{100, 209}
};
const Point Q_contour2_points[] MEM_TYPE = {
	{101, 181},
	{102, 180},
	{112, 180},
	{113, 179},
	{117, 179},
	{118, 179},
	{120, 179},
	{121, 178},
	{123, 178},
	{124, 177},
	{126, 177},
	{126, 177},
	{128, 177},
	{128, 176},
	{130, 176},
	{130, 175},
	{132, 175},
	{132, 174},
	{134, 174},
	{134, 174},
	{135, 174},
	{136, 173},
	{136, 173},
	{137, 172},
	{138, 172},
	{139, 172},
	{140, 172},
	{141, 170},
	{142, 170},
	{143, 170},
	{143, 170},
	{144, 169},
	{145, 169},
	{145, 168},
	{146, 168},
	{147, 167},
	{148, 167},
	{149, 166},
	{150, 166},
	{151, 164},
	{152, 164},
	{154, 162},
	{155, 162},
	{158, 160},
	{158, 160},
	{162, 155},
	{163, 155},
	{165, 153},
	{165, 153},
	{170, 148},
	{170, 147},
	{172, 145},
	{172, 144},
	{174, 143},
	{174, 142},
	{176, 140},
	{176, 139},
	{177, 138},
	{177, 137},
	{179, 136},
	{179, 135},
	{179, 134},
	{179, 134},
	{180, 133},
	{180, 132},
	{181, 131},
	{181, 130},
	{182, 130},
	{182, 129},
	{183, 128},
	{183, 127},
	{183, 126},
	{183, 126},
	{184, 125},
	{184, 124},
	{185, 124},
	{185, 122},
	{185, 122},
	{185, 121},
	{186, 120},
	{186, 119},
	{187, 118},
	{187, 116},
	{187, 115},
	{187, 114},
	{188, 113},
	{188, 111},
	{189, 110},
	{189, 108},
	{189, 107},
	{189, 103},
	{190, 103},
	{190, 94},
	{191, 94},
	{191, 87},
	{190, 86},
	{190, 78},
	{189, 77},
	{189, 74},
	{189, 73},
	{189, 71},
	{188, 70},
	{188, 68},
	{187, 67},
	{187, 65},
	{187, 65},
	{187, 63},
	{186, 63},
	{186, 61},
	{185, 61},
	{185, 59},
	{185, 59},
	{185, 57},
	{184, 56},
	{184, 56},
	{183, 55},
	{183, 54},
	{183, 54},
	{183, 53},
	{182, 52},
	{182, 52},
	{181, 51},
	{181, 50},
	{181, 50},
	{181, 49},
	{180, 48},
	{180, 48},
	{179, 47},
	{179, 46},
	{179, 46},
	{179, 45},
	{177, 44},
	{177, 43},
	{176, 42},
	{176, 41},
	{174, 39},
	{174, 38},
	{172, 36},
	{172, 35},
	{166, 29},
	{166, 29},
	{162, 25},
	{162, 25},
	{156, 20},
	{155, 20},
	{153, 17},
	{152, 17},
	{151, 16},
	{150, 16},
	{149, 14},
	{148, 14},
	{147, 13},
	{146, 13},
	{145, 12},
	{145, 12},
	{144, 12},
	{143, 12},
	{143, 11},
	{142, 11},
	{141, 10},
	{141, 10},
	{140, 10},
	{139, 10},
	{139, 9},
	{138, 9},
	{137, 8},
	{136, 8},
	{136, 8},
	{135, 8},
	{134, 7},
	{133, 7},
	{132, 6},
	{131, 6},
	{130, 6},
	{129, 6},
	{128, 5},
	{127, 5},
	{126, 4},
	{124, 4},
	{124, 4},
	{122, 4},
	{121, 3},
	{119, 3},
	{118, 2},
	{115, 2},
	{114, 2},
	{107, 1}
};
const Point R_contour1_points[] MEM_TYPE = {
	{73, 1},
	{73, 2},
	{69, 2},
	{68, 2},
	{65, 2},
	{65, 3},
	{63, 3},
	{62, 4},
	{61, 4},
	{60, 4},
	{59, 4},
	{58, 5},
	{56, 5},
	{56, 6},
	{54, 6},
	{54, 6},
	{53, 6},
	{52, 7},
	{52, 7},
	{51, 8},
	{50, 8},
	{50, 8},
	{49, 8},
	{48, 9},
	{48, 9},
	{46, 10},
	{46, 10},
	{44, 12},
	{44, 12},
	{42, 14},
	{41, 14},
	{29, 25},
	{29, 26},
	{27, 28},
	{27, 29},
	{26, 30},
	{26, 31},
	{25, 32},
	{25, 33},
	{24, 33},
	{24, 34},
	{23, 35},
	{23, 35},
	{23, 36},
	{23, 37},
	{22, 37},
	{22, 38},
	{21, 39},
	{21, 40},
	{21, 40},
	{21, 42},
	{20, 42},
	{20, 44},
	{19, 44},
	{19, 46},
	{18, 46},
	{18, 48},
	{18, 49},
	{18, 52},
	{17, 52},
	{17, 56},
	{16, 57},
	{16, 181}
};
const Point R_contour2_points[] MEM_TYPE = {
	{73, 1},
	{86, 1},
	{86, 2},
	{90, 2},
	{91, 2},
	{94, 2},
	{94, 3},
	{96, 3},
	{97, 4},
	{99, 4},
	{100, 4},
	{101, 4},
	{102, 5},
	{103, 5},
	{104, 6},
	{105, 6},
	{105, 6},
	{106, 6},
	{107, 7},
	{107, 7},
	{108, 8},
	{109, 8},
	{109, 8},
	{110, 8},
	{111, 9},
	{111, 9},
	{112, 10},
	{113, 10},
	{114, 11},
	{115, 11},
	{116, 12},
	{117, 12},
	{119, 14},
	{120, 14},
	{130, 25},
	{130, 25},
	{132, 28},
	{132, 29},
	{134, 30},
	{134, 31},
	{135, 32},
	{135, 33},
	{136, 33},
	{136, 34},
	{136, 35},
	{136, 35},
	{138, 37},
	{138, 38},
	{139, 39},
	{139, 40},
	{139, 40},
	{139, 41},
	{140, 42},
	{140, 43},
	{141, 44},
	{141, 45},
	{141, 46},
	{141, 47},
	{142, 48},
	{142, 50},
	{143, 50},
	{143, 54},
	{143, 54},
	{143, 61},
	{144, 61},
	{144, 67},
	{143, 68},
	{143, 75},
	{143, 75},
	{143, 78},
	{142, 79},
	{142, 81},
	{141, 82},
	{141, 83},
	{141, 84},
	{141, 85},
	{140, 86},
	{140, 87},
	{139, 88},
	{139, 88},
	{139, 89},
	{139, 90},
	{138, 91},
	{138, 92},
	{137, 92},
	{137, 93},
	{136, 94},
	{136, 95},
	{135, 96},
	{135, 96},
	{134, 98},
	{134, 99},
	{132, 100},
	{132, 101},
	{131, 102},
	{131, 103},
	{128, 105},
	{128, 106},
	{122, 113},
	{121, 113},
	{118, 115},
	{118, 115},
	{116, 117},
	{115, 117},
	{114, 118},
	{113, 118},
	{112, 120},
	{111, 120},
	{111, 120},
	{110, 120},
	{109, 121},
	{109, 121},
	{108, 122},
	{107, 122},
	{107, 122},
	{106, 122},
	{105, 123},
	{105, 123},
	{104, 124},
	{103, 124},
	{103, 124},
	{101, 124},
	{101, 125},
	{99, 125},
	{99, 126},
	{96, 126},
	{96, 126},
	{94, 126},
	{93, 127},
	{90, 127},
	{89, 128},
	{71, 128},
	{70, 127},
	{67, 127},
	{66, 126},
	{64, 126},
	{63, 127},
	{63, 127},
	{62, 128},
	{61, 128},
	{59, 126},
	{58, 126},
	{56, 125},
	{56, 125},
	{55, 124},
	{54, 124},
	{53, 123},
	{52, 123},
	{51, 122},
	{50, 122},
	{50, 121},
	{49, 121},
	{47, 119},
	{46, 119},
	{44, 117},
	{44, 117},
	{41, 114},
	{38, 112}
};
const Point R_contour3_points[] MEM_TYPE = {
	{61, 128},
	{61, 128},
	{62, 128},
	{62, 130},
	{65, 133},
	{65, 133},
	{68, 136},
	{69, 136},
	{71, 138},
	{71, 138},
	{74, 141},
	{75, 141},
	{77, 143},
	{77, 143},
	{80, 145},
	{81, 145},
	{83, 147},
	{84, 147},
	{86, 149},
	{86, 149},
	{89, 152},
	{90, 152},
	{92, 154},
	{92, 154},
	{95, 157},
	{96, 157},
	{98, 159},
	{99, 159},
	{101, 162},
	{102, 162},
	{104, 164},
	{105, 164},
	{107, 166},
	{108, 166},
	{110, 168},
	{111, 168},
	{113, 171},
	{114, 171},
	{116, 173},
	{117, 173},
	{119, 175},
	{120, 175},
	{122, 178},
	{123, 178},
	{125, 180},
	{126, 181}
};
const Point S_contour1_points[] MEM_TYPE = {
	{40, 1},
	{39, 2},
	{36, 2},
	{35, 2},
	{33, 2},
	{33, 3},
	{31, 3},
	{31, 4},
	{29, 4},
	{29, 4},
	{28, 4},
	{27, 5},
	{27, 5},
	{26, 6},
	{25, 6},
	{25, 6},
	{24, 6},
	{18, 12},
	{18, 12},
	{17, 12},
	{17, 13},
	{14, 16},
	{14, 17},
	{12, 18},
	{12, 19},
	{12, 20},
	{12, 21},
	{11, 21},
	{11, 22},
	{10, 23},
	{10, 23},
	{10, 24},
	{10, 25},
	{9, 25},
	{9, 27},
	{8, 27},
	{8, 28},
	{8, 29},
	{8, 31},
	{7, 31},
	{7, 33},
	{6, 34},
	{6, 38},
	{6, 39},
	{6, 50},
	{6, 51},
	{6, 55},
	{7, 56},
	{7, 59},
	{8, 59},
	{8, 61},
	{8, 62},
	{8, 63},
	{9, 64},
	{9, 65},
	{10, 65},
	{10, 66},
	{10, 67},
	{10, 67},
	{11, 68},
	{11, 69},
	{12, 69},
	{12, 70},
	{13, 71},
	{13, 72},
	{16, 75},
	{16, 75},
	{16, 76},
	{17, 76},
	{19, 78},
	{20, 78},
	{22, 80},
	{23, 80},
	{23, 81},
	{24, 81},
	{25, 82},
	{25, 82},
	{26, 82},
	{27, 82},
	{28, 83},
	{29, 83},
	{30, 84},
	{31, 84},
	{32, 84},
	{34, 84},
	{35, 85},
	{37, 85},
	{38, 86},
	{41, 86},
	{42, 86},
	{46, 86},
	{46, 87},
	{52, 87},
	{52, 88},
	{60, 88},
	{61, 88},
	{68, 88},
	{69, 89},
	{74, 89},
	{75, 90},
	{79, 90},
	{80, 90},
	{83, 90},
	{84, 91},
	{86, 91},
	{87, 92},
	{89, 92},
	{90, 92},
	{92, 92},
	{92, 93},
	{94, 93},
	{94, 94},
	{96, 94},
	{96, 94},
	{98, 94},
	{99, 95},
	{99, 95},
	{100, 96},
	{101, 96},
	{101, 96},
	{102, 96},
	{103, 98},
	{104, 98},
	{105, 99},
	{106, 99},
	{111, 104},
	{111, 105},
	{112, 106},
	{112, 107},
	{113, 108},
	{113, 109},
	{114, 109},
	{114, 110},
	{115, 111},
	{115, 112},
	{115, 113},
	{115, 113},
	{116, 114},
	{116, 115},
	{117, 116},
	{117, 118},
	{118, 119},
	{118, 121},
	{118, 122},
	{118, 127},
	{119, 128},
	{119, 137},
	{118, 138},
	{118, 143},
	{118, 144},
	{118, 147},
	{117, 147},
	{117, 149},
	{116, 149},
	{116, 151},
	{115, 151},
	{115, 153},
	{115, 153},
	{115, 154},
	{114, 155},
	{114, 155},
	{113, 156},
	{113, 157},
	{112, 158},
	{112, 159},
	{111, 160},
	{111, 160},
	{109, 162},
	{109, 163},
	{107, 166},
	{107, 166},
	{106, 167},
	{105, 167},
	{103, 170},
	{102, 170},
	{100, 172},
	{99, 172},
	{98, 173},
	{97, 173},
	{96, 174},
	{96, 174},
	{94, 175},
	{93, 175},
	{92, 176},
	{92, 176},
	{91, 177},
	{90, 177},
	{90, 177},
	{88, 177},
	{88, 178},
	{86, 178},
	{85, 179},
	{83, 179},
	{82, 179},
	{79, 179},
	{78, 180},
	{4, 179}
};
const Point S_contour2_points[] MEM_TYPE = {
	{40, 1},
	{106, 1},
	{107, 2}
};
const Point T_contour1_points[] MEM_TYPE = {
	{109, 0},
	{109, 0},
	{109, 1},
	{57, 1},
	{56, 2},
	{53, 2},
	{52, 1},
	{0, 0}
};
const Point T_contour2_points[] MEM_TYPE = {
	{53, 2},
	{54, 2},
	{55, 2},
	{54, 181}
};
const Point T_contour3_points[] MEM_TYPE = {
	{57, 1},
	{109, 1},
	{110, 2}
};
const Point T_contour4_points[] MEM_TYPE = {
	{57, 1},
	{110, 2}
};
const Point U_contour1_points[] MEM_TYPE = {
	{14, 0},
	{14, 0},
	{12, 0},
	{13, 0},
	{14, 1},
	{14, 116},
	{14, 117},
	{14, 122},
	{15, 122},
	{15, 126},
	{16, 126},
	{16, 128},
	{16, 129},
	{16, 131},
	{17, 132},
	{17, 134},
	{18, 134},
	{18, 135},
	{18, 136},
	{18, 137},
	{19, 138},
	{19, 139},
	{20, 140},
	{20, 141},
	{21, 141},
	{21, 142},
	{21, 143},
	{21, 143},
	{22, 144},
	{22, 145},
	{23, 145},
	{23, 146},
	{24, 147},
	{24, 148},
	{25, 149},
	{25, 149},
	{26, 151},
	{26, 151},
	{27, 153},
	{27, 153},
	{29, 155},
	{29, 156},
	{33, 160},
	{33, 161},
	{36, 164},
	{37, 164},
	{40, 167},
	{41, 167},
	{43, 169},
	{44, 169},
	{45, 170},
	{46, 170},
	{47, 172},
	{48, 172},
	{48, 172},
	{49, 172},
	{50, 174},
	{51, 174},
	{52, 174},
	{52, 174},
	{53, 175},
	{54, 175},
	{55, 176},
	{56, 176},
	{56, 177},
	{58, 177},
	{59, 177},
	{60, 177},
	{61, 178},
	{62, 178},
	{63, 179},
	{65, 179},
	{65, 179},
	{69, 179},
	{69, 180},
	{88, 180},
	{88, 179},
	{91, 179},
	{92, 179},
	{94, 179},
	{94, 178},
	{96, 178},
	{97, 177},
	{99, 177},
	{99, 177},
	{100, 177},
	{101, 176},
	{102, 176},
	{103, 175},
	{103, 175},
	{104, 174},
	{105, 174},
	{105, 174},
	{106, 174},
	{107, 173},
	{107, 173},
	{109, 172},
	{109, 172},
	{110, 171},
	{111, 171},
	{113, 169},
	{113, 169},
	{115, 167},
	{116, 167},
	{119, 164},
	{120, 164},
	{124, 160},
	{124, 159},
	{128, 155},
	{128, 155},
	{130, 153},
	{130, 152},
	{132, 150},
	{132, 149},
	{133, 148},
	{133, 147},
	{134, 147},
	{134, 146},
	{135, 145},
	{135, 144},
	{136, 143},
	{136, 143},
	{136, 142},
	{136, 141},
	{137, 141},
	{137, 139},
	{138, 139},
	{138, 138},
	{139, 137},
	{139, 136},
	{139, 136},
	{139, 134},
	{140, 134},
	{140, 132},
	{141, 132},
	{141, 130},
	{141, 129},
	{141, 127},
	{142, 126},
	{142, 124},
	{143, 123},
	{143, 118},
	{143, 118},
	{144, 0}
};
const Point V_contour1_points[] MEM_TYPE = {
	{0, 0},
	{1, 0},
	{2, 0},
	{2, 1},
	{2, 3},
	{3, 4},
	{3, 5},
	{4, 6},
	{4, 7},
	{4, 8},
	{4, 9},
	{5, 10},
	{5, 11},
	{6, 12},
	{6, 13},
	{6, 14},
	{6, 15},
	{7, 16},
	{7, 17},
	{8, 18},
	{8, 20},
	{8, 21},
	{8, 22},
	{9, 23},
	{9, 24},
	{10, 25},
	{10, 26},
	{10, 27},
	{10, 28},
	{11, 29},
	{11, 30},
	{12, 31},
	{12, 32},
	{12, 33},
	{12, 34},
	{13, 35},
	{13, 37},
	{14, 37},
	{14, 39},
	{14, 40},
	{14, 41},
	{15, 42},
	{15, 43},
	{16, 44},
	{16, 45},
	{16, 46},
	{16, 47},
	{17, 48},
	{17, 49},
	{18, 50},
	{18, 51},
	{18, 52},
	{18, 54},
	{19, 54},
	{19, 56},
	{20, 56},
	{20, 58},
	{21, 59},
	{21, 60},
	{21, 61},
	{21, 62},
	{22, 63},
	{22, 64},
	{23, 65},
	{23, 66},
	{23, 67},
	{23, 68},
	{24, 69},
	{24, 71},
	{25, 71},
	{25, 73},
	{25, 73},
	{25, 75},
	{26, 75},
	{26, 77},
	{27, 77},
	{27, 79},
	{27, 80},
	{27, 81},
	{28, 82},
	{28, 83},
	{29, 84},
	{29, 85},
	{29, 86},
	{29, 88},
	{30, 88},
	{30, 90},
	{31, 90},
	{31, 92},
	{31, 92},
	{31, 94},
	{32, 94},
	{32, 96},
	{33, 96},
	{33, 98},
	{33, 99},
	{33, 100},
	{34, 101},
	{34, 102},
	{35, 103},
	{35, 105},
	{35, 105},
	{35, 107},
	{36, 107},
	{36, 109},
	{37, 109},
	{37, 111},
	{37, 111},
	{37, 113},
	{38, 113},
	{38, 115},
	{39, 115},
	{39, 117},
	{40, 118},
	{40, 119},
	{40, 120},
	{40, 122},
	{41, 122},
	{41, 124},
	{42, 124},
	{42, 126},
	{42, 126},
	{42, 128},
	{43, 128},
	{43, 130},
	{44, 130},
	{44, 132},
	{44, 132},
	{44, 134},
	{45, 134},
	{45, 136},
	{46, 137},
	{46, 139},
	{46, 139},
	{46, 141},
	{47, 141},
	{47, 143},
	{48, 143},
	{48, 145},
	{48, 145},
	{48, 147},
	{49, 147},
	{49, 149},
	{50, 149},
	{50, 151},
	{50, 151},
	{50, 153},
	{51, 154},
	{51, 155},
	{52, 156},
	{52, 158},
	{52, 158},
	{52, 160},
	{53, 160},
	{53, 162},
	{54, 162},
	{54, 164},
	{54, 164},
	{54, 166},
	{55, 166},
	{55, 168},
	{56, 169},
	{56, 170},
	{56, 171},
	{56, 172},
	{57, 173},
	{57, 174},
	{58, 175},
	{58, 176},
	{59, 177},
	{59, 178},
	{60, 179},
	{61, 179},
	{61, 179},
	{62, 179},
	{63, 180},
	{69, 180},
	{70, 179},
	{71, 179},
	{72, 178},
	{73, 178},
	{73, 177},
	{73, 177},
	{75, 175},
	{75, 174},
	{75, 174},
	{75, 173},
	{76, 172},
	{76, 170},
	{77, 170},
	{77, 168},
	{77, 168},
	{77, 166},
	{78, 166},
	{78, 164},
	{79, 164},
	{79, 162},
	{80, 162},
	{80, 160},
	{80, 160},
	{80, 158},
	{81, 158},
	{81, 156},
	{82, 155},
	{82, 153},
	{82, 153},
	{82, 151},
	{83, 151},
	{83, 149},
	{84, 149},
	{84, 147},
	{84, 147},
	{84, 145},
	{85, 145},
	{85, 143},
	{86, 143},
	{86, 141},
	{86, 141},
	{86, 139},
	{87, 138},
	{87, 136},
	{88, 136},
	{88, 134},
	{88, 134},
	{88, 132},
	{89, 132},
	{89, 130},
	{90, 130},
	{90, 128},
	{90, 128},
	{90, 126},
	{91, 126},
	{91, 124},
	{92, 123},
	{92, 122},
	{92, 121},
	{92, 120},
	{93, 119},
	{93, 118},
	{94, 117},
	{94, 115},
	{94, 115},
	{94, 113},
	{95, 113},
	{95, 111},
	{96, 111},
	{96, 109},
	{96, 109},
	{96, 107},
	{97, 106},
	{97, 105},
	{98, 104},
	{98, 103},
	{99, 102},
	{99, 101},
	{99, 100},
	{99, 99},
	{100, 98},
	{100, 96},
	{101, 96},
	{101, 94},
	{101, 94},
	{101, 92},
	{102, 91},
	{102, 90},
	{103, 89},
	{103, 88},
	{103, 87},
	{103, 86},
	{104, 85},
	{104, 84},
	{105, 83},
	{105, 82},
	{105, 81},
	{105, 80},
	{106, 79},
	{106, 77},
	{107, 76},
	{107, 75},
	{107, 74},
	{107, 73},
	{108, 72},
	{108, 71},
	{109, 70},
	{109, 69},
	{109, 68},
	{109, 67},
	{110, 66},
	{110, 65},
	{111, 64},
	{111, 63},
	{111, 62},
	{111, 60},
	{112, 59},
	{112, 58},
	{113, 57},
	{113, 56},
	{113, 55},
	{113, 54},
	{114, 53},
	{114, 52},
	{115, 51},
	{115, 50},
	{115, 49},
	{115, 48},
	{116, 47},
	{116, 45},
	{117, 44},
	{117, 43},
	{118, 42},
	{118, 41},
	{118, 40},
	{118, 39},
	{119, 38},
	{119, 37},
	{120, 36},
	{120, 35},
	{120, 34},
	{120, 33},
	{121, 32},
	{121, 30},
	{122, 29},
	{122, 28},
	{122, 27},
	{122, 26},
	{123, 25},
	{123, 24},
	{124, 23},
	{124, 22},
	{124, 21},
	{124, 20},
	{125, 19},
	{125, 18},
	{126, 17},
	{126, 16},
	{126, 15},
	{126, 13},
	{127, 12},
	{127, 11},
	{128, 10},
	{128, 9},
	{128, 8},
	{128, 7},
	{129, 6},
	{129, 5},
	{130, 4},
	{130, 3},
	{130, 2},
	{131, 0}
};
const Point W_contour1_points[] MEM_TYPE = {
	{16, 0},
	{16, 0},
	{14, 0},
	{15, 0},
	{16, 1},
	{16, 116},
	{16, 117},
	{16, 122},
	{17, 123},
	{17, 126},
	{18, 127},
	{18, 129},
	{18, 130},
	{18, 132},
	{19, 133},
	{19, 134},
	{20, 135},
	{20, 136},
	{21, 137},
	{21, 139},
	{21, 139},
	{21, 141},
	{22, 141},
	{22, 142},
	{23, 143},
	{23, 143},
	{23, 144},
	{23, 145},
	{25, 147},
	{25, 147},
	{25, 148},
	{25, 149},
	{26, 149},
	{26, 150},
	{27, 151},
	{27, 151},
	{28, 153},
	{28, 153},
	{29, 155},
	{29, 155},
	{31, 157},
	{31, 158},
	{33, 160},
	{33, 160},
	{37, 164},
	{37, 165},
	{38, 166},
	{39, 166},
	{42, 170},
	{43, 170},
	{44, 171},
	{45, 171},
	{47, 173},
	{48, 173},
	{48, 174},
	{49, 174},
	{50, 175},
	{51, 175},
	{52, 176},
	{52, 176},
	{53, 177},
	{54, 177},
	{55, 177},
	{56, 177},
	{56, 178},
	{58, 178},
	{59, 179},
	{61, 179},
	{61, 179},
	{64, 179},
	{65, 180},
	{80, 180},
	{81, 179},
	{84, 179},
	{84, 179},
	{86, 179},
	{86, 178},
	{88, 178},
	{88, 177},
	{90, 177},
	{90, 177},
	{91, 177},
	{92, 176},
	{92, 176},
	{93, 175},
	{94, 175},
	{94, 174},
	{95, 174},
	{96, 173},
	{97, 173},
	{99, 172},
	{99, 172},
	{101, 170},
	{102, 170},
	{105, 167},
	{105, 167},
	{109, 163},
	{109, 162},
	{113, 159},
	{113, 158},
	{115, 156},
	{115, 155},
	{116, 154},
	{116, 153},
	{118, 152},
	{118, 151},
	{118, 151},
	{118, 150},
	{120, 149},
	{120, 148},
	{120, 147},
	{120, 147},
	{121, 146},
	{121, 145},
	{122, 145},
	{122, 144},
	{122, 143},
	{122, 143},
	{123, 142},
	{123, 141},
	{124, 140},
	{124, 139},
	{124, 139},
	{124, 137},
	{125, 136},
	{125, 135},
	{126, 134},
	{126, 132},
	{126, 132},
	{126, 131},
	{128, 130},
	{128, 129},
	{129, 128},
	{131, 130},
	{131, 130},
	{132, 131},
	{132, 132},
	{132, 132},
	{132, 134},
	{133, 135},
	{133, 136},
	{134, 137},
	{134, 139},
	{134, 139},
	{134, 140},
	{135, 141},
	{135, 142},
	{136, 143},
	{136, 143},
	{136, 144},
	{136, 145},
	{137, 145},
	{137, 146},
	{138, 147},
	{138, 147},
	{139, 148},
	{139, 149},
	{139, 149},
	{139, 150},
	{140, 151},
	{140, 151},
	{141, 153},
	{141, 153},
	{143, 155},
	{143, 155},
	{144, 157},
	{144, 158},
	{146, 160},
	{146, 160},
	{155, 169},
	{155, 169},
	{158, 171},
	{158, 171},
	{160, 173},
	{161, 173},
	{162, 174},
	{162, 174},
	{164, 175},
	{164, 175},
	{165, 176},
	{166, 176},
	{166, 177},
	{168, 177},
	{168, 177},
	{169, 177},
	{170, 178},
	{171, 178},
	{172, 179},
	{174, 179},
	{174, 179},
	{177, 179},
	{178, 180},
	{193, 180},
	{194, 179},
	{197, 179},
	{198, 179},
	{199, 179},
	{200, 178},
	{201, 178},
	{202, 177},
	{203, 177},
	{204, 177},
	{204, 177},
	{205, 176},
	{206, 176},
	{206, 175},
	{207, 175},
	{208, 174},
	{208, 174},
	{210, 173},
	{210, 173},
	{211, 172},
	{212, 172},
	{214, 170},
	{214, 170},
	{217, 168},
	{218, 168},
	{223, 163},
	{223, 162},
	{225, 160},
	{225, 159},
	{228, 156},
	{228, 155},
	{229, 154},
	{229, 153},
	{231, 152},
	{231, 151},
	{232, 150},
	{232, 149},
	{233, 149},
	{233, 148},
	{233, 147},
	{233, 147},
	{234, 146},
	{234, 145},
	{235, 145},
	{235, 144},
	{236, 143},
	{236, 143},
	{236, 142},
	{236, 141},
	{237, 140},
	{237, 139},
	{238, 139},
	{238, 137},
	{238, 136},
	{238, 135},
	{239, 134},
	{239, 133},
	{240, 132},
	{240, 130},
	{240, 130},
	{240, 127},
	{241, 126},
	{241, 124},
	{242, 123},
	{242, 118},
	{242, 117},
	{243, 0}
};
const Point W_contour2_points[] MEM_TYPE = {
	{129, 128},
	{129, 0},
	{130, 0}
};
const Point W_contour3_points[] MEM_TYPE = {
	{129, 128},
	{130, 0}
};
const Point X_contour1_points[] MEM_TYPE = {
	{12, 0},
	{11, 1},
	{10, 1},
	{10, 1},
	{11, 2},
	{11, 23},
	{12, 24},
	{12, 29},
	{12, 30},
	{12, 33},
	{13, 34},
	{13, 37},
	{14, 37},
	{14, 40},
	{14, 40},
	{14, 42},
	{15, 42},
	{15, 44},
	{16, 44},
	{16, 46},
	{16, 46},
	{16, 48},
	{17, 48},
	{17, 49},
	{18, 50},
	{18, 50},
	{18, 51},
	{18, 52},
	{19, 52},
	{19, 53},
	{20, 54},
	{20, 54},
	{21, 55},
	{21, 56},
	{21, 56},
	{21, 57},
	{23, 59},
	{23, 59},
	{23, 60},
	{23, 61},
	{25, 62},
	{25, 63},
	{27, 65},
	{27, 65},
	{29, 67},
	{29, 68},
	{35, 75},
	{36, 75},
	{38, 77},
	{39, 77},
	{41, 79},
	{42, 79},
	{43, 80},
	{44, 80},
	{44, 81},
	{45, 81},
	{46, 82},
	{47, 82},
	{48, 83},
	{48, 83},
	{49, 84},
	{50, 84},
	{51, 84},
	{52, 84},
	{52, 85},
	{53, 85},
	{55, 87},
	{55, 88},
	{54, 89},
	{53, 89},
	{52, 90},
	{51, 90},
	{50, 91},
	{49, 91},
	{48, 92},
	{48, 92},
	{47, 92},
	{46, 92},
	{45, 93},
	{44, 93},
	{44, 94},
	{43, 94},
	{42, 95},
	{41, 95},
	{40, 96},
	{40, 96},
	{38, 97},
	{37, 97},
	{35, 100},
	{34, 100},
	{27, 107},
	{27, 107},
	{24, 111},
	{24, 111},
	{23, 113},
	{23, 113},
	{21, 115},
	{21, 115},
	{21, 116},
	{21, 117},
	{19, 118},
	{19, 119},
	{18, 120},
	{18, 120},
	{18, 121},
	{18, 122},
	{17, 122},
	{17, 124},
	{16, 124},
	{16, 125},
	{16, 126},
	{16, 127},
	{15, 128},
	{15, 128},
	{14, 129},
	{14, 130},
	{14, 131},
	{14, 133},
	{13, 134},
	{13, 136},
	{12, 136},
	{12, 139},
	{12, 140},
	{12, 145},
	{11, 145},
	{10, 181}
};
const Point X_contour2_points[] MEM_TYPE = {
	{54, 89},
	{56, 87},
	{60, 87},
	{61, 88},
	{62, 88},
	{63, 87},
	{75, 87},
	{75, 88},
	{77, 88},
	{77, 87},
	{82, 87},
	{85, 90},
	{86, 90},
	{87, 91},
	{88, 91},
	{89, 92},
	{90, 92},
	{90, 92},
	{92, 92},
	{92, 93},
	{93, 93},
	{94, 94},
	{94, 94},
	{96, 95},
	{96, 95},
	{97, 96},
	{98, 96},
	{99, 97},
	{100, 97},
	{102, 99},
	{103, 99},
	{111, 108},
	{111, 109},
	{114, 111},
	{114, 112},
	{116, 114},
	{116, 115},
	{117, 115},
	{117, 116},
	{118, 118},
	{118, 118},
	{119, 119},
	{119, 120},
	{120, 120},
	{120, 121},
	{120, 122},
	{120, 122},
	{121, 123},
	{121, 124},
	{122, 124},
	{122, 126},
	{122, 126},
	{122, 128},
	{123, 128},
	{123, 129},
	{124, 130},
	{124, 131},
	{124, 132},
	{124, 134},
	{125, 134},
	{125, 136},
	{126, 137},
	{126, 141},
	{126, 141},
	{126, 148},
	{127, 149},
	{126, 182}
};
const Point X_contour3_points[] MEM_TYPE = {
	{85, 90},
	{83, 88},
	{83, 86},
	{84, 86},
	{84, 86},
	{86, 84},
	{86, 84},
	{87, 84},
	{88, 84},
	{89, 83},
	{90, 83},
	{90, 82},
	{91, 82},
	{92, 82},
	{92, 82},
	{94, 80},
	{94, 80},
	{96, 79},
	{96, 79},
	{99, 77},
	{99, 77},
	{101, 75},
	{102, 75},
	{109, 68},
	{109, 67},
	{111, 65},
	{111, 64},
	{113, 63},
	{113, 62},
	{115, 60},
	{115, 59},
	{116, 58},
	{116, 57},
	{117, 56},
	{117, 56},
	{118, 55},
	{118, 54},
	{118, 54},
	{118, 53},
	{119, 52},
	{119, 52},
	{120, 51},
	{120, 50},
	{120, 50},
	{120, 49},
	{121, 48},
	{121, 48},
	{122, 47},
	{122, 46},
	{122, 45},
	{122, 44},
	{123, 43},
	{123, 42},
	{124, 41},
	{124, 40},
	{124, 39},
	{124, 37},
	{125, 36},
	{125, 33},
	{126, 33},
	{126, 29},
	{126, 29},
	{126, 21},
	{127, 21},
	{127, 2},
	{126, 1},
	{125, 0}
};
const Point Y_contour1_points[] MEM_TYPE = {
	{12, 0},
	{11, 0},
	{10, 0},
	{10, 0},
	{11, 1},
	{11, 40},
	{12, 40},
	{12, 45},
	{12, 46},
	{12, 49},
	{13, 50},
	{13, 52},
	{14, 53},
	{14, 55},
	{14, 56},
	{14, 57},
	{15, 58},
	{15, 59},
	{16, 60},
	{16, 61},
	{16, 62},
	{16, 63},
	{17, 64},
	{17, 65},
	{18, 65},
	{18, 66},
	{18, 67},
	{18, 68},
	{20, 69},
	{20, 70},
	{21, 71},
	{21, 71},
	{21, 72},
	{21, 73},
	{22, 73},
	{22, 74},
	{23, 75},
	{23, 76},
	{25, 77},
	{25, 78},
	{27, 80},
	{27, 81},
	{29, 83},
	{29, 84},
	{35, 90},
	{36, 90},
	{38, 92},
	{39, 92},
	{41, 94},
	{42, 94},
	{43, 96},
	{44, 96},
	{45, 97},
	{46, 97},
	{46, 98},
	{47, 98},
	{48, 99},
	{48, 99},
	{49, 99},
	{50, 99},
	{51, 100},
	{52, 100},
	{52, 101},
	{54, 101},
	{54, 101},
	{56, 101},
	{57, 102},
	{60, 102},
	{61, 103},
	{67, 103},
	{67, 103},
	{69, 103},
	{69, 104},
	{68, 182}
};
const Point Y_contour2_points[] MEM_TYPE = {
	{69, 104},
	{70, 103},
	{71, 103},
	{71, 103},
	{77, 103},
	{77, 102},
	{80, 102},
	{81, 101},
	{83, 101},
	{84, 101},
	{85, 101},
	{86, 100},
	{86, 100},
	{87, 99},
	{88, 99},
	{89, 99},
	{90, 99},
	{90, 98},
	{91, 98},
	{92, 97},
	{92, 97},
	{94, 96},
	{94, 96},
	{96, 94},
	{96, 94},
	{98, 93},
	{99, 93},
	{101, 91},
	{101, 91},
	{109, 84},
	{109, 83},
	{111, 80},
	{111, 80},
	{113, 78},
	{113, 77},
	{115, 75},
	{115, 75},
	{116, 73},
	{116, 73},
	{117, 72},
	{117, 71},
	{118, 71},
	{118, 70},
	{118, 69},
	{118, 69},
	{120, 67},
	{120, 66},
	{120, 65},
	{120, 65},
	{121, 64},
	{121, 63},
	{122, 63},
	{122, 61},
	{122, 61},
	{122, 59},
	{123, 59},
	{123, 57},
	{124, 56},
	{124, 55},
	{124, 54},
	{124, 52},
	{125, 52},
	{125, 49},
	{126, 48},
	{126, 45},
	{126, 44},
	{126, 37},
	{127, 36},
	{127, 1},
	{126, 0},
	{125, 0}
};
const Point Z_contour1_points[] MEM_TYPE = {
	{16, 0},
	{16, 1},
	{16, 2},
	{16, 2},
	{17, 1},
	{120, 1},
	{120, 2},
	{122, 2},
	{123, 2},
	{124, 2},
	{127, 6},
	{127, 6},
	{128, 7},
	{128, 8},
	{128, 8},
	{128, 9},
	{129, 10},
	{129, 16},
	{128, 17},
	{128, 18},
	{126, 19},
	{126, 20},
	{124, 23},
	{124, 23},
	{120, 27},
	{120, 27},
	{117, 31},
	{117, 31},
	{113, 35},
	{113, 35},
	{110, 39},
	{110, 40},
	{107, 43},
	{107, 44},
	{103, 47},
	{103, 48},
	{100, 51},
	{100, 52},
	{96, 55},
	{96, 56},
	{93, 59},
	{93, 60},
	{90, 63},
	{90, 64},
	{86, 67},
	{86, 68},
	{83, 71},
	{83, 72},
	{80, 75},
	{80, 76},
	{76, 80},
	{76, 80},
	{73, 84},
	{73, 84},
	{69, 88},
	{69, 88},
	{66, 92},
	{66, 92},
	{63, 96},
	{63, 96},
	{59, 100},
	{59, 101},
	{56, 104},
	{56, 105},
	{53, 107},
	{53, 108},
	{50, 111},
	{50, 112},
	{46, 115},
	{46, 116},
	{43, 120},
	{43, 120},
	{40, 124},
	{40, 124},
	{36, 128},
	{36, 128},
	{33, 132},
	{33, 132},
	{29, 136},
	{29, 136},
	{26, 140},
	{26, 141},
	{23, 144},
	{23, 145},
	{19, 148},
	{19, 149},
	{16, 152},
	{16, 153},
	{12, 156},
	{12, 157},
	{9, 160},
	{9, 161},
	{7, 163},
	{7, 164},
	{6, 164},
	{6, 165},
	{6, 166},
	{6, 171},
	{6, 172},
	{6, 173},
	{7, 174},
	{7, 174},
	{8, 176},
	{8, 177},
	{10, 178},
	{10, 178},
	{12, 179},
	{12, 179},
	{13, 180},
	{135, 181}
};

const Contour A_contours[] MEM_TYPE = {
	{A_contour1_points, 75},
	{A_contour2_points, 8},
	{A_contour3_points, 73}
};
const Contour B_contours[] MEM_TYPE = 
};
const Contour C_contours[] MEM_TYPE = {
	{C_contour1_points, 227},
	{C_contour2_points, 48}
};
const Contour D_contours[] MEM_TYPE = {
	{D_contour1_points, 224}
};
const Contour E_contours[] MEM_TYPE = {
	{E_contour1_points, 134},
	{E_contour2_points, 4},
	{E_contour3_points, 3},
	{E_contour4_points, 2}
};
const Contour F_contours[] MEM_TYPE = {
	{F_contour1_points, 70},
	{F_contour2_points, 5},
	{F_contour3_points, 3},
	{F_contour4_points, 2}
};
const Contour G_contours[] MEM_TYPE = {
	{G_contour1_points, 272},
	{G_contour2_points, 49}
};
const Contour H_contours[] MEM_TYPE = {
	{H_contour1_points, 10},
	{H_contour2_points, 8},
	{H_contour3_points, 7}
};
const Contour I_contours[] MEM_TYPE = {
	{I_contour1_points, 6}
};
const Contour J_contours[] MEM_TYPE = {
	{J_contour1_points, 71}
};
const Contour K_contours[] MEM_TYPE = {
	{K_contour1_points, 18},
	{K_contour2_points, 5},
	{K_contour3_points, 4}
};
const Contour L_contours[] MEM_TYPE = {
	{L_contour1_points, 70}
};
const Contour M_contours[] MEM_TYPE = {
	{M_contour1_points, 16},
	{M_contour2_points, 118},
	{M_contour3_points, 129}
};
const Contour N_contours[] MEM_TYPE = {
	{N_contour1_points, 16},
	{N_contour2_points, 126}
};
const Contour O_contours[] MEM_TYPE = {
	{O_contour1_points, 361}
};
const Contour P_contours[] MEM_TYPE = {
	{P_contour1_points, 63},
	{P_contour2_points, 164}
};
const Contour Q_contours[] MEM_TYPE = {
	{Q_contour1_points, 185},
	{Q_contour2_points, 187}
};
const Contour R_contours[] MEM_TYPE = {
	{R_contour1_points, 63},
	{R_contour2_points, 158},
	{R_contour3_points, 46}
};
const Contour S_contours[] MEM_TYPE = {
	{S_contour1_points, 197},
	{S_contour2_points, 3}
};
const Contour T_contours[] MEM_TYPE = {
	{T_contour1_points, 8},
	{T_contour2_points, 4},
	{T_contour3_points, 3},
	{T_contour4_points, 2}
};
const Contour U_contours[] MEM_TYPE = {
	{U_contour1_points, 144}
};
const Contour V_contours[] MEM_TYPE = {
	{V_contour1_points, 349}
};
const Contour W_contours[] MEM_TYPE = {
	{W_contour1_points, 259},
	{W_contour2_points, 3},
	{W_contour3_points, 2}
};
const Contour X_contours[] MEM_TYPE = {
	{X_contour1_points, 126},
	{X_contour2_points, 67},
	{X_contour3_points, 67}
};
const Contour Y_contours[] MEM_TYPE = {
	{Y_contour1_points, 74},
	{Y_contour2_points, 71}
};
const Contour Z_contours[] MEM_TYPE = {
	{Z_contour1_points, 110}
};

const Letter letters[] MEM_TYPE = {
	{'A', A_contours, 3},
	{'B', B_contours, 0},
	{'C', C_contours, 2},
	{'D', D_contours, 1},
	{'E', E_contours, 4},
	{'F', F_contours, 4},
	{'G', G_contours, 2},
	{'H', H_contours, 3},
	{'I', I_contours, 1},
	{'J', J_contours, 1},
	{'K', K_contours, 3},
	{'L', L_contours, 1},
	{'M', M_contours, 3},
	{'N', N_contours, 2},
	{'O', O_contours, 1},
	{'P', P_contours, 2},
	{'Q', Q_contours, 2},
	{'R', R_contours, 3},
	{'S', S_contours, 2},
	{'T', T_contours, 4},
	{'U', U_contours, 1},
	{'V', V_contours, 1},
	{'W', W_contours, 3},
	{'X', X_contours, 3},
	{'Y', Y_contours, 2},
	{'Z', Z_contours, 1}
};

#define MaxYSize 209
//END LETTERS
// The above comment is required for parsing. Everything after here is left as is.


const int letterCount = sizeof(letters) / sizeof(letters[0]);

// The method of retrival for AVR characters in mem vs SAMD chars is different too
#ifdef __AVR__

  // If AVR, we have to build the character from progmem and return the pointer

  // The code here is going to be super complicated
  // Basically, the Letter object is stored somewhere and we have to read it, then rebuilt it as an object
  // Before we can rebuilt it, we have to allocate space for it in the SRAM of the arduino
  // But if we do this over and over, it will fill up all the arduino's SRAM (called memory leaking)
  // So we need to free up the old space that we took up, before adding more to SRAM.

  #include <avr/pgmspace.h>

  // Place to save pointer so we know what to deallocate later
  Letter* allocatedSpace = nullptr;

  void freeLetter(Letter* letter) {
      if (letter == nullptr) return;

      // Free each contour's points array
      for (uint8_t i = 0; i < letter->contourCount; i++) {
          if (letter->contours[i].points != nullptr) {
              free(letter->contours[i].points);
          }
      }

      // Free the contours array
      if (letter->contours != nullptr) {
          free(letter->contours);
      }

      // Finally, free the letter object itself
      free(letter);
  }


  // This method retrives the letter from PROMEM space, stores it in SRAM and returns a pointer.
  Letter* getLetter(char c) {
    // First, free up old space
    if (allocatedSpace != nullptr) {
      // Serial.println("FREEING:");
      // Serial.println(allocatedSpace->letter);
      freeLetter(allocatedSpace);
      allocatedSpace = nullptr; // use after free go brrrrrr
    }

    // Loop through the letters stored in PROGMEM
    for (const Letter& letter : letters) {
      char thisLetter = (char) pgm_read_byte(&letter.letter);

      if (thisLetter == c) {
        // Allocate memory for the Letter object in SRAM
        Letter* sramLetter = (Letter*)malloc(sizeof(Letter));
        sramLetter->letter = thisLetter;

        // Get the contour count from PROGMEM so we know how many we're looking for
        uint8_t contourCount = pgm_read_byte(&letter.contourCount);
        sramLetter->contourCount = contourCount;

        // Allocate memory for the contours array in SRAM
        sramLetter->contours = (Contour*)malloc(contourCount * sizeof(Contour));

        // Get the contours pointer from PROGMEM
        Contour* contours = (Contour*)pgm_read_ptr(&letter.contours);

        // Copy each contour
        for (uint8_t i = 0; i < contourCount; i++) {
          // Get the point count for this contour from PROGMEM
          uint8_t pointCount = pgm_read_byte(&contours[i].pointCount);
          sramLetter->contours[i].pointCount = pointCount;

          // Allocate memory for the points array in SRAM
          sramLetter->contours[i].points = (Point*)malloc(pointCount * sizeof(Point));

          // Get the points pointer from PROGMEM
          Point* points = (Point*)pgm_read_ptr(&contours[i].points);

          // Copy each point
          for (uint8_t j = 0; j < pointCount; j++) {
            sramLetter->contours[i].points[j].x = pgm_read_byte(&points[j].x);
            sramLetter->contours[i].points[j].y = pgm_read_byte(&points[j].y);
          }
        }

        // Log letter for freeing later
        allocatedSpace = sramLetter;

        // Return the pointer to the Letter object stored in SRAM
        return sramLetter;
      }
    }

    // Return nullptr if the letter wasn't found
    return nullptr;
  }

#else
  // If SAMD, we can simply return the pointer, everything with extracting from progmem is handled automatically for const data
  const Letter* getLetter(char letter) {
      for (int i = 0; i < letterCount; ++i) {
          if (letters[i].letter == letter) {
              return &letters[i];
          }
      }
      return nullptr;
  }
#endif




// TODO: 
// Figure out how to know how far to move to the next letter...
//    Probably inject furthest point into Letter struct
// Char width multiplier

// NOTES:
// y motor covers ground 3.5x slower than x
// Each letter has 1150 x steps between them


// Allow easy-disable debugging (saves about 1% more storage and mem)
#define DEBUG 0
#define DEBUG_StraightToPrint 0
#define DEBUG_SpeedBoost 0

// If debug is true, we'll define the Serial.print feature, otherwise don't compile print statements.
#if DEBUG
#define DEBUG_PRINT(x)  Serial.print(x)
#define DEBUG_PRINTLN(x) Serial.println(x)
#else
#define DEBUG_PRINT(x)
#define DEBUG_PRINTLN(x)
#endif

#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Stepper.h>
#include <ezButton.h>
#include <Servo.h>

// Allow sending code over wifi if it's a Nano IoT 33
#if defined(ARDUINO_SAMD_NANO_33_IOT)
  #include "secrets.h"
  #include <WiFiNINA.h>
  #include <ArduinoOTA.h>
  const char ssid[] = SECRET_SSID;
  const char pass[] = SECRET_PASS;
  int status = WL_IDLE_STATUS;
#endif


LiquidCrystal_I2C lcd(0x27, 16, 2);  // Set the LCD address to 0x27 for a 16x2 display

ezButton button1(14);
#define INIT_MSG "Initializing..."
#define MODE_NAME "   LABELMAKER   "
#define PRINT_CONF "  PRINT LABEL?  "
#define PRINTING "    PRINTING    "
#define MENU_CLEAR ":                "


//text variables
const int x_scale = 230;  //these are multiplied against the stored coordinate (between 0 and 4) to get the actual number of steps moved
const int y_scale = 230;  //for example, if this is 230(default), then 230(scale) x 4(max coordinate) = 920 (motor steps)
const int scale = x_scale;


// const int space = 230 * 5;
const int space = 70; // My comment: our "space" is according to a 255x255 scale, since it is scaled up at the line function now instead of in the plot char function. 

const int letterWidth = 920;

// Joystick setup
const int joystickXPin = A2;
const int joystickYPin = A1;
const int joystickButtonThreshold = 200;

// Menu parameters
const char alphabet[] = "_ABCDEFGHIJKLMNOPQRSTUVWXYZ";  //alphabet menu
const int alphabetSize = sizeof(alphabet) - 1;

#if DEBUG_StraightToPrint
  String text = "TIMES";
#else
  String text;
#endif

int currentCharacter = 0;
int cursorPosition = 0;
int currentPage = 0;
const int charactersPerPage = 16;

// Stepper motor parameters
const int stepCount = 200;
const int stepsPerRevolution = 2048;

// initialize the stepper library for both steppers:
Stepper xStepper(stepsPerRevolution, 6, 8, 7, 9);
Stepper yStepper(stepsPerRevolution, 2, 4, 3, 5);

const int xPins[4] = { 6, 8, 7, 9 };
const int yPins[4] = { 2, 4, 3, 5 };

//Servo
const int SERVO_PIN = 13;
Servo servo;
int angle = 30;

enum State { MainMenu,
             Editing,
             PrintConfirmation,
             Printing };

#if DEBUG_StraightToPrint
  State currentState = Printing;
#else
  State currentState = MainMenu;
#endif
State prevState = Printing;

enum jState { LEFT,
              RIGHT,
              UP,
              DOWN,
              MIDDLE,
              UPRIGHT,
              UPLEFT,
              DOWNRIGHT,
              DOWNLEFT };
jState joyState = MIDDLE;
jState prevJoyState = MIDDLE;

boolean pPenOnPaper = false;  // pen on paper in previous cycle
int lineCount = 0;

int xpos = 0;
int ypos = 0;
const int posS = 2;
const int posM = 7;
const int posL = 12;
bool joyUp;
bool joyDown;
bool joyLeft;
bool joyRight;
int button1State;
int joystickX;
int joystickY;

void printLetter(char c) {
  const Letter* letterA = getLetter(c);
  if (letterA != nullptr) {
      for (int i = 0; i < letterA->contourCount; ++i) {
          const Contour& contour = letterA->contours[i];
          Serial.print("Contour ");
          Serial.print(i);
          Serial.println(":");
          for (int j = 0; j < contour.pointCount; ++j) {
              const Point& point = contour.points[j];
              Serial.print("Point ");
              Serial.print(j);
              Serial.print(": (");
              Serial.print(point.x);
              Serial.print(", ");
              Serial.print(point.y);
              Serial.println(")");
          }
      }
  } else {
      DEBUG_PRINTLN("Letter not found");
  }
}

void setup() {
  #if DEBUG
    pinMode(LED_BUILTIN, OUTPUT);
    Serial.begin(9600);
    while(!Serial) {
      digitalWrite(LED_BUILTIN, HIGH);
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
    }
    digitalWrite(LED_BUILTIN, LOW);
  #endif

  // printLetter('A');
  // while(true){};

  lcd.init();
  lcd.backlight();

  // Some of my code for updating over wifi while building
  #if defined(ARDUINO_SAMD_NANO_33_IOT)
    lcd.setCursor(0, 0);
    lcd.print("wifi...");
    while ( status != WL_CONNECTED) {
      DEBUG_PRINT("Attempting to connect to SSID: ");
      DEBUG_PRINTLN(ssid);
      status = WiFi.begin(ssid, pass);
    }
    ArduinoOTA.begin(WiFi.localIP(), "Arduino", "SecurePassword", InternalStorage);
  #endif

  lcd.setCursor(0, 0);
  lcd.print(INIT_MSG);

  pinMode(LED_BUILTIN, OUTPUT);

  button1.setDebounceTime(50);

  servo.attach(SERVO_PIN);
  servo.write(angle);

  penDown(false);  //servo to tape surface so pen can be inserted

  // set the speed of the motors
  #if DEBUG_StraightToPrint
    yStepper.setSpeed(12*1.3);
    xStepper.setSpeed(10*1.3);
  #else
    yStepper.setSpeed(12);  // set first stepper speed (these should stay the same)
    xStepper.setSpeed(10);  // set second stepper speed (^ weird stuff happens when you push it too fast)
  #endif

  penUp();      //ensure that the servo is lifting the pen carriage away from the tape
  homeYAxis();  //lower the Y axis all the way to the bottom

  ypos = 0;
  xpos = 0;

  releaseMotors();
  lcd.clear();
}

void loop() {
  #if defined(ARDUINO_SAMD_NANO_33_IOT)
    ArduinoOTA.poll();
  #endif

  button1.loop();
  button1State = button1.getState();

  joystickX = analogRead(joystickXPin);
  joystickY = analogRead(joystickYPin);
  joyUp = joystickY < (512 - joystickButtonThreshold);
  joyDown = joystickY > (512 + joystickButtonThreshold);
  joyLeft = joystickX < (512 - joystickButtonThreshold);
  joyRight = joystickX > (512 + joystickButtonThreshold);

  switch (currentState) {
    case MainMenu:
      {
        if (prevState != MainMenu) {
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print(MODE_NAME);
          lcd.setCursor(0, 1);
          lcd.print("      START     ");
          cursorPosition = 5;
          prevState = MainMenu;
        }

        lcd.setCursor(cursorPosition, 1);

        if (millis() % 600 < 400) {
          lcd.print(">");
        } else {
          lcd.print(" ");
        }

        if (button1.isPressed()) {
          lcd.clear();
          currentState = Editing;
          prevState = MainMenu;
        }
      }
      break;

    case Editing:
      if (prevState != Editing) {
        lcd.clear();
        prevState = Editing;
      }
      lcd.setCursor(0, 0);
      lcd.print(":");
      lcd.setCursor(1, 0);
      lcd.print(text);

      if (joyUp) {
        DEBUG_PRINTLN(currentCharacter);
        if (currentCharacter > 0) {
          currentCharacter--;
          lcd.print(alphabet[currentCharacter]);
        }
        delay(250);

      } else if (joyDown) {
        DEBUG_PRINTLN(currentCharacter);
        if (currentCharacter < (alphabetSize - 1)) {
          currentCharacter++;
          lcd.print(alphabet[currentCharacter]);
        }
        delay(250);
      } else {
        if (millis() % 600 < 450) {
          lcd.print(alphabet[currentCharacter]);
        } else {
          lcd.print(" ");
        }
      }

      if (joyLeft) {
        if (text.length() > 0) {
          text.remove(text.length() - 1);
          lcd.setCursor(0, 0);
          lcd.print(MENU_CLEAR);
          lcd.setCursor(1, 0);
          lcd.print(text);
        }
        delay(250);

      } else if (joyRight) {
        if (currentCharacter == 0) {
          text += ' ';
        } else {
          text += alphabet[currentCharacter];
          currentCharacter = 0;
        }
        delay(250);
      }

      if (button1.isPressed()) {
        if (currentCharacter == 0) {
          text += ' ';
        } else {
          text += alphabet[currentCharacter];
          currentCharacter = 0;
        }
        lcd.clear();
        currentState = PrintConfirmation;
        prevState = Editing;
      }

      break;

    case PrintConfirmation:
      if (prevState == Editing) {
        lcd.setCursor(0, 0);
        lcd.print(PRINT_CONF);
        lcd.setCursor(0, 1);
        lcd.print("   YES     NO   ");
        lcd.setCursor(2, 1);
        cursorPosition = 2;
        prevState = PrintConfirmation;
      }

      if (joyLeft) {
        lcd.setCursor(0, 1);
        lcd.print("   YES     NO   ");
        lcd.setCursor(2, 1);
        cursorPosition = 2;
        delay(200);
      } else if (joyRight) {
        lcd.setCursor(0, 1);
        lcd.print("   YES     NO   ");
        lcd.setCursor(10, 1);
        cursorPosition = 10;
        delay(200);
      }

      lcd.setCursor(cursorPosition, 1);

      if (millis() % 600 < 400) {  // Blink every 500 ms
        lcd.print(">");
      } else {
        lcd.print(" ");
      }

      if (button1.isPressed()) {
        if (cursorPosition == 2) {
          lcd.clear();
          currentState = Printing;
          prevState = PrintConfirmation;

        } else if (cursorPosition == 10) {
          lcd.clear();
          currentState = Editing;
          prevState = PrintConfirmation;
        }
      }

      break;

    case Printing:
      if (prevState == PrintConfirmation) {
        lcd.setCursor(0, 0);
        lcd.print(PRINTING);  //update screen
      }

      // ----------------------------------------------- plot text
      plotText(text, xpos, ypos);

      // Move to new line and reset
      // line(xpos + space, 0, 0);  // move to new line
      // line25Scale(xpos + space, 0, 0);  // move to new line 
      // TODO make the above work again
      
      xpos = 0;
      ypos = 0;

      text = "";
      yStepper.step(-2250); // MINE: Moves the motor forwards a bit for the next label.
      releaseMotors();
      lcd.clear();
      currentState = Editing;
      prevState = Printing;

      break;
  }
}


// These are the max values the label maker uses per character
const int maxXStepperPos = 1200;
const int maxYStepperPos = 3200; // 3.5x more steps needed to screw up same distance

// The multiplieres needed to scale 255 to the max stepper pos
const int stepper255ScalerX = maxXStepperPos / MaxYSize;
const int stepper255ScalerY = maxYStepperPos / MaxYSize;

// My version
void plotText(String &str, int x, int y) {  //takes in our label as a string, and breaks it up by character for plotting
  // y is always 0

  int pos = 0;                              // pos is where the letter will start, gets added to with each new letter

  int spaceBetweenChars = 20;              // This is on a 255* scale which is why it is a lower number

  for (int i = 0; i < str.length(); i++) {
    char c = char(str.charAt(i));
    if (byte(c) != 195) {
      if (c == ' ') {  //if it's a space, add a space.
        pos += space;
      } else {
        int characterWidth = (int) plotCharacter(c, x + pos, y);
        pos += characterWidth + spaceBetweenChars; // Move the width of the character, plus some extra space forwards for the next one
      }
    }
    DEBUG_PRINTLN(pos);
  }
  releaseMotors();
}

// My version
uint8_t plotCharacter(char c, int x, int y) {
  // Returns the width of the character
  // As we draw, keep track of furthest X point so we know how far to move the starting pos of the next char

  DEBUG_PRINTLN(c);

  // Keep track of max x pos, we'll use it to determin how far to move for next letter.
  uint8_t maxXPos = 0;

  const Letter* letterA = getLetter(c);
  if (letterA != nullptr) {
      for (int i = 0; i < letterA->contourCount; ++i) {
          const Contour& contour = letterA->contours[i];
          // DEBUG_PRINT("Contour ");
          // DEBUG_PRINT(i);
          // DEBUG_PRINTLN(":");

          // Move pen to start of contour
          const Point& firstPoint = contour.points[0];
          line25Scale(x+ firstPoint.x, firstPoint.y, false);

          // Loop through each, drawing from one point to the next
          for (int j = 1; j < contour.pointCount; ++j) {
              const Point& point = contour.points[j];
              int pointX = (int) point.x;
              int pointY = (int) point.y;

              // Apparently the x axis needs inverting
              // pointX = 255 - pointX; // this won't work because there is extra buffer space to the right of the char...

              // DEBUG_PRINT("Point ");
              // DEBUG_PRINT(j);
              // DEBUG_PRINT(": (");
              // DEBUG_PRINT(point.x);
              // DEBUG_PRINT(", ");
              // DEBUG_PRINT(point.y);
              // DEBUG_PRINTLN(")");

              line25Scale(x + pointX, pointY, true);

              // Keep track of furthest x point
              if (point.x > maxXPos) {
                maxXPos = point.x;
              }
          }
      }
  } else {
      DEBUG_PRINTLN("Letter not found");
  }

  return maxXPos;
}

void line25Scale(int newx, int newy, bool drawing) {
  // Rescale input from 0 through 255 to 0 through whatever the max stepper pos is per character
  // And apparently flip it upside down too

  // DEBUG_PRINTLN("Line:");
  // DEBUG_PRINTLN(newx*stepper255ScalerX);
  // DEBUG_PRINTLN(newy*stepper255ScalerY);
  
  // line(maxXStepperPos-(newx*stepper255ScalerX), maxYStepperPos-(newy*stepper255ScalerY), drawing);
  line(newx*stepper255ScalerX, maxYStepperPos-(newy*stepper255ScalerY), drawing);
}

void line(int newx, int newy, bool drawing) {
  // My note: This function appears to take x and y input in the number of steps the stepper motors make.

  //this function is an implementation of bresenhams line algorithm
  //this algorithm basically finds the slope between any two points, allowing us to figure out how many steps each motor should do to move smoothly to the target
  //in order to do this, we give this function our next X (newx) and Y (newy) coordinates, and whether the pen should be up or down (drawing)

  if (drawing < 2) {  //checks if we should be drawing and puts the pen up or down based on that.
    penDown(drawing);    // dashed: 0= don't draw / 1=draw / 2... = draw dashed with variable dash width
  } else {
    penDown((stepCount / drawing) % 2);  //can do dashed lines, but for now this isn't doing anything since we're only sending 0 or 1.
  }

  int i;
  long over = 0;

  long dx = newx - xpos;  //calculate the difference between where we are (xpos) and where we want to be (newx)
  long dy = newy - ypos;
  int dirx = dx > 0 ? -1 : 1;
  int diry = dy > 0 ? 1 : -1;
  //the reason one of these ^ is inverted logic (1/-1) is due to the direction these motors rotate in the system.

  dx = abs(dx);  //normalize the dx/dy values so that they are positive.
  dy = abs(dy);  //abs() is taking the "absolute value" - basically it removes the negative sign from negative numbers

  //the following nested If statements check which change is greater, and use that to determine which coordinate (x or y) get's treated as the rise or the run in the slope calculation
  //we have to do this because technically bresenhams only works for the positive quandrant of the cartesian coordinate grid,
  // so we are just flipping the values around to get the line moving in the correct direction relative to it's current position (instead of just up an to the right)
  if (dx > dy) {
    over = dx / 2;
    for (i = 0; i < dx; i++) {  //for however much our current position differs from the target,
      xStepper.step(dirx);      //do a step in that direction (remember, dirx is always going to be either 1 or -1 from the ternary operator above)

      // DEBUG_PRINT("Xsteps: ");
      // DEBUG_PRINT(dirx);
      // DEBUG_PRINT("  ");

      over += dy;
      if (over >= dx) {
        over -= dx;

        // DEBUG_PRINT("Ysteps: ");
        // DEBUG_PRINTLN(diry);

        yStepper.step(diry);
      }
      //delay(1);
    }
  } else {
    over = dy / 2;
    for (i = 0; i < dy; i++) {
      yStepper.step(diry);
      // DEBUG_PRINT("Ysteps: ");
      // DEBUG_PRINT(diry);
      // DEBUG_PRINT("  ");
      over += dx;
      if (over >= dy) {
        over -= dy;
        // DEBUG_PRINT("Xsteps: ");
        // DEBUG_PRINTLN(dirx);
        xStepper.step(dirx);
      }
      //delay(1);
    }
  }
  xpos = newx;  //store positions
  ypos = newy;  //store positions
}

void penDown(boolean penOnPaper) {  //used to handle lifting or lowering the pen on to the tape
  if (penOnPaper) {              //if the pen is already up, put it down
    angle = 80;
  } else {  //if down, then lift up.
    angle = 25;
  }
  servo.write(angle);                        //actuate the servo to either position.
  if (penOnPaper != pPenOnPaper) delay(50);  //gives the servo time to move before jumping into the next action
  pPenOnPaper = penOnPaper;                  //store the previous state.
}

void penUp() {  //singular command to lift the pen up
  servo.write(25);
}

void releaseMotors() {
  for (int i = 0; i < 4; i++) {  //deactivates all the motor coils
    digitalWrite(xPins[i], 0);   //just picks each motor pin and send 0 voltage
    digitalWrite(yPins[i], 0);
  }
  penDown(false);
}

void homeYAxis() {
  yStepper.step(-3000);  //lowers the pen holder to it's lowest position.
}

void resetScreen() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(MENU_CLEAR);
  lcd.setCursor(1, 0);
  cursorPosition = 1;
}

